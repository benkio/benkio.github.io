* Wrap input into a javascript tag
#+name: inline-js
#+begin_src elisp :exports none :results html :var blk=""
(concat
 "<script type=\"text/javascript\">\n"
 (cadr (org-babel-lob--src-info blk))
 "\n"
 "</script>")
#+end_src

* Compile Org Files

Look at the org files modified within 4 months and compile them using ~org-twbs-export-to-html~

#+name: compileOrgFiles
#+begin_src elisp :exports none :results none :var path="./articles/"
  (setq timeToArchiveInMonth 4
        timeToArchiveInMonthSeconds (* timeToArchiveInMonth 2592000)
        ;; path "./articles/"
        )
  (mapc
   (lambda (f) (progn
                 (when (time-less-p (time-add (current-time) (- 0 timeToArchiveInMonthSeconds )) (nth 5 (file-attributes f)))
                   (message "compile org file %s" f)
                   (find-file f)
                   (org-twbs-export-to-html)
                   (kill-buffer)
                   )))
   (directory-files path t "\.org$"))
  ;; (mapc
  ;;  (lambda (f) (progn
  ;;                (when (time-less-p (time-add (current-time) (- 0 timeToArchiveInMonthSeconds )) (nth 5 (file-attributes f)))
  ;;                  (message "post compilation processing - file %s" f)
  ;;                  (find-file f)
  ;;                  (while (re-search-forward "<span style=\"color: #262626; background-color: #0d0d0d;\">\\([ ]*\\)</span>" nil t)
  ;;                    (replace-match "\\1"))
  ;;                  (save-buffer)
  ;;                  (kill-buffer)
  ;;                  )))
  ;;  (directory-files path t "\.html$"))
#+end_src

* Articles HTML files to JS

- Gets all the HTML files
- Read it's contents and strip the unecessary values
- Insert the contents (Abstracts) into a js array
- Wrap it with javascript tag
- Return the Text

#+name: articlesRelativePaths
#+begin_src elisp :exports none :results html
  (progn
    (defun ListToJsArray (elist varName)
      (setq almostJSVar (seq-reduce (lambda (acc content)(concat acc "\"" content "\"" ",")) elist (concat "var " varName " = ["))
             almostJSVarLeng (length almostJSVar)
            )
      (concat (substring almostJSVar 0 (- almostJSVarLeng 1)) "];")
      )
    (setq
     filePaths (mapcar (lambda (fileName) (concat "./articles/" fileName))
                       (directory-files "./articles/" nil "\.html$"))
     fileContents (mapcar (lambda (filePath) (with-temp-buffer
                                               (insert-file-contents filePath)
                                               (search-forward "outline-container-Article")
                                               (beginning-of-line)
                                               (kill-region (point-min) (point))
                                               (search-forward "outline-container-ShareButtons")
                                               (beginning-of-line)
                                               (kill-region (point) (point-max))
                                               (goto-char (point-min))
                                               (replace-string "/" "\\/")
                                               (goto-char (point-min))
                                               (replace-string "\n" "")
                                               (goto-char (point-min))
                                               (replace-string "'" "\\'")
                                               (goto-char (point-min))
                                               (replace-string "\"" "\\\"")
                                               (buffer-string)
                                               )
                            )
                          filePaths)
     )
    (concat
     "<script type=\"text/javascript\">\n"
     (ListToJsArray (reverse fileContents) "htmlArticles")
     "\n"
     (ListToJsArray (reverse filePaths) "htmlArticlesPaths")
     "\n"
     "</script>")
    )
#+end_src

* Parse CSV File

Given a CVS file path:
- Read it
- Create a string representing a html bootstrap buttons
- Return it

#+name: booksToButtons
#+begin_src elisp :exports none :results html :var csvFilePath="" type=""
  (require 'pcsv)

  (defun getTypeIndex (type)
    "Given the input type (book, wantedBook, albums...) it returns the index of the csv type column"
    (cond
     ((string-equal type "book") 4)
     ((string-equal type "wantedBook") 3)
     (t -1)
     )
    )

  (defun getTypeLinkIndex (type)
    "Given the input type (book, wantedBook, albums...) it returns the index of the csv link column"
    (cond
     ((string-equal type "book") 5)
     ((string-equal type "wantedBook") 5)
     (t -1)
     )
    )

  (defun getTypeTitleIndex (type)
    "Given the input type (book, wantedBook, albums...) it returns the index of the csv title column"
    (cond
     ((string-equal type "book") 2)
     ((string-equal type "wantedBook") 1)
     (t -1)
     )
    )

  (defun getTypeStatusIndex (type)
    "Given the input type (book, wantedBook, albums...) it returns the index of the csv status column"
    (cond
     ((string-equal type "wantedBook") 4)
     (t -1)
     )
    )

  (defun contentTypeToButtonLabel (content type)
    "Given the content and type it returns the related button label"
    (setq
     contentStatus (nth (getTypeIndex type) content)
     buttonLabel (cond
                   ((string-equal contentStatus "Audiobook Ita") "<span class=\"label label-primary\">Audiobook Ita</span>")
                   ((string-equal contentStatus "Audiobook Eng") "<span class=\"label label-success\">Audiobook Eng</span>")
                   ((string-equal contentStatus "Manga") "<span class=\"label label-warning\">Manga</span>")
                   (t "")
                   ))
    buttonLabel
    )

  (defun contentStatusToButtonStyleClass (content type)
    "Given the content and type it returns the related button style class"
    (setq
     contentStatus (nth (getTypeStatusIndex type) content)
     buttonStyle (cond
                   ((string-equal contentStatus "Available Online") "btn-danger")
                   ((string-equal contentStatus "Readable Online") "btn-success")
                   ((string-equal contentStatus "Purchased") "btn-primary")
                   (t "btn-dark")
                   ))
    buttonStyle
    )

  (defun csvListToButton (content type)
    "Given a csv list, generate a bootstra button string"
    (setq
     buttonLabel (contentTypeToButtonLabel content type)
     buttonStyleClass (contentStatusToButtonStyleClass content type)
     )
    (concat
     "<button type=\"button\" class=\"btn btn-lg "
     type
     " "
     buttonStyleClass
     "\" style=\"margin: 5px;\" onclick=\"window.open('"
     (nth (getTypeLinkIndex type) content) ;; link
     "','_blank');\" >"
     (nth (getTypeTitleIndex type) content) ;; title
     " "
     buttonLabel
     "</button>"
     )
    )

  (setq csvFileContentLines (cdr (pcsv-parse-file csvFilePath))
        csvFileButtons (mapcar (lambda (csvLine) (csvListToButton csvLine type)) csvFileContentLines)
        )

  (mapconcat 'identity csvFileButtons "\n")
#+end_src

