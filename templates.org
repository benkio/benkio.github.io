* Wrap input into a javascript tag
#+name: inline-js
#+begin_src elisp :exports none :results html :var blk=""
(concat
 "<script type=\"text/javascript\">\n"
 (cadr (org-babel-lob--src-info blk))
 "\n"
 "</script>")
#+end_src

* Navbar

#+name: navbar
#+begin_src elisp :exports none :results html :var page=1
  (setq blogActive        (if (eq page 1) "active" "")
        articlesActive    (if (eq page 2) "active" "")
        booksActive       (if (eq page 3) "active" "")
        albumsActive      (if (eq page 4) "active" "")
        noteTrainerActive (if (eq page 5) "active" "")
        )

  (format "<a target=\"_self\" class=\"navbar-brand\" href=\"/index.html\">
    <img class=\"img-circle rounded-circle\" src=\"https://www.gravatar.com/avatar/aa7f68a32b011ac94698a7a1cb16ffc8?s=200\" width=\"50px\"/>
  </a>
  <button class=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">
    <span class=\"navbar-toggler-icon\"></span>
  </button>
  <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">
    <ul class=\"navbar-nav me-auto mb-2 mb-lg-0\">
      <li class=\"nav-item\"> <a class=\"nav-link fs-4 %s\"        aria-current=\"page\" target=\"_self\" href=\"/blog.html\">Blog</a> </li>
      <li class=\"nav-item\"> <a class=\"nav-link fs-4 %s\"        aria-current=\"page\" target=\"_self\" href=\"/articles.html\">Articles</a> </li>
      <li class=\"nav-item\"> <a class=\"nav-link fs-4 %s\"        aria-current=\"page\" target=\"_self\" href=\"/books.html\">Books</a> </li>
      <li class=\"nav-item\"> <a class=\"nav-link fs-4 %s\" aria-current=\"page\" target=\"_self\" href=\"/albums.html\">Albums</a> </li>
      <li class=\"nav-item\"> <a class=\"nav-link fs-4 %s\"        aria-current=\"page\" target=\"_self\" href=\"/NoteTrainer/NoteTrainer.html\">Note Trainer</a> </li>
    </ul>
  </div>" blogActive articlesActive booksActive albumsActive noteTrainerActive)
#+END_SRC
* Compile Org Files

Look at the org files modified within 4 months and compile them using ~org-twbs-export-to-html~

#+name: compileOrgFiles
#+begin_src elisp :exports none :results none :var path="./articles/"
  (setq timeToArchiveInMonth 4
        timeToArchiveInMonthSeconds (* timeToArchiveInMonth 2592000)
        ;; path "./articles/"
        )
  (mapc
   (lambda (f) (progn
                 (when (time-less-p (time-add (current-time) (- 0 timeToArchiveInMonthSeconds )) (nth 5 (file-attributes f)))
                   (message "compile org file %s" f)
                   (find-file f)
                   (org-html-export-to-html)
                   (kill-buffer)
                   )))
   (directory-files path t "\.org$"))
  nil
#+end_src

* Articles HTML files to JS

- Gets all the HTML files
- Read it's contents and strip the unecessary values
- Insert the contents (Abstracts) into a js array
- Wrap it with javascript tag
- Return the Text

#+name: articlesRelativePaths
#+begin_src elisp :exports none :results html
  (progn
    (defun ListToJsArray (elist varName)
      (setq almostJSVar (seq-reduce (lambda (acc content)(concat acc "\"" content "\"" ",")) elist (concat "var " varName " = ["))
             almostJSVarLeng (length almostJSVar)
            )
      (concat (substring almostJSVar 0 (- almostJSVarLeng 1)) "];")
      )
    (setq
     filePaths (mapcar (lambda (fileName) (concat "./articles/" fileName))
                       (directory-files "./articles/" nil "\.html$"))
     fileContents (mapcar (lambda (filePath) (with-temp-buffer
                                               (insert-file-contents filePath)
                                               (search-forward "outline-container-Article")
                                               (beginning-of-line)
                                               (kill-region (point-min) (point))
                                               (search-forward "outline-container-ShareButtons")
                                               (beginning-of-line)
                                               (kill-region (point) (point-max))
                                               (goto-char (point-min))
                                               (replace-string "/" "\\/")
                                               (goto-char (point-min))
                                               (replace-string "\n" "")
                                               (goto-char (point-min))
                                               (replace-string "'" "\\'")
                                               (goto-char (point-min))
                                               (replace-string "\"" "\\\"")
                                               (buffer-string)
                                               )
                            )
                          filePaths)
     )
    (concat
     "<script type=\"text/javascript\">\n"
     (ListToJsArray (reverse fileContents) "htmlArticles")
     "\n"
     (ListToJsArray (reverse filePaths) "htmlArticlesPaths")
     "\n"
     "</script>")
    )
#+end_src

* Parse CSV File

Given a CVS file path:
- Read it
- Create a string representing a html bootstrap buttons
- Return it

#+name: csvToButtonsLinks
#+begin_src elisp :exports none :results html :var csvFilePath="" type=""
  (require 'pcsv)
  (require 'dash)

  (defun getType (type csvLine)
    "Given the input type (book, wantedBook, albums...) it returns the value of the csv type column
        Audiobook Eng/Ita, Manga
        "
    (cond
     ((string-equal type "book") (nth 4 csvLine))
     ((string-equal type "wantedBook") (nth 3 csvLine))
     (t "")
     )
    )

  (defun getTypeLink (type csvLine)
    "Given the input type (book, wantedBook, albums...) it returns the value of the csv link column"
    (cond
     ((string-equal type "book") (nth 5 csvLine))
     ((string-equal type "album") (nth 2 csvLine))
     ((string-equal type "wantedBook") (nth 5 csvLine))
     ((string-equal type "wantedAlbum") (nth 4 csvLine))
     (t "")
     )
    )

  (defun getTypeTitle (type csvLine)
    "Given the input type (book, wantedBook, albums...) it returns the value of the csv title column"
    (cond
     ((string-equal type "book") (nth 2 csvLine))
     ((string-equal type "album") (nth 1 csvLine))
     ((string-equal type "wantedBook") (nth 1 csvLine))
     ((string-equal type "wantedAlbum") (nth 1 csvLine))
     (t "")
     )
    )

  (defun getTypeStatus (type csvLine)
    "Given the input type (book, wantedBook, albums...) it returns the value of the csv status column
         Digital Only, Available/Readable Online, Purchased
        "
    (cond
     ((string-equal type "wantedBook") (nth 4 csvLine))
     ((string-equal type "wantedAlbum") (nth 3 csvLine))
     (t "")
     )
    )

  (defun getTypeSubtitle (type csvLine)
    "Given the input type (book, wantedBook, albums...) it returns the value of the csv status column"
    (cond
     ((string-equal type "book") (nth 3 csvLine))
     ((string-equal type "wantedBook") (nth 2 csvLine))
     ((string-equal type "album") (nth 0 csvLine))
     ((string-equal type "wantedAlbum") (nth 0 csvLine))
     (t "")
     )
    )

  (defun getTypeGroup (type csvLine)
    "Given the input type (book, wantedBook) it returns the value of the csv status column"
    (cond
     ((string-equal type "book") (nth 0 csvLine))
     ((string-equal type "wantedBook") (nth 0 csvLine))
     (t "")
     )
    )

  (defun contentTypeToButtonLabel (content type)
    "Given the content and type it returns the related button label"
    (setq
     contentStatus (getType type content)
     buttonLabel (cond
                  ((string-equal contentStatus "Audiobook Ita") "<span class=\"label label-primary\">Audiobook Ita</span>")
                  ((string-equal contentStatus "Audiobook Eng") "<span class=\"label label-success\">Audiobook Eng</span>")
                  ((string-equal contentStatus "Manga") "<span class=\"label label-warning\">Manga</span>")
                  (t "")
                  ))
    buttonLabel
    )

  (defun contentStatusToButtonStyleClass (content type)
    "Given the content and type it returns the related button style class"
    (setq
     contentStatus (getTypeStatus type content)
     buttonStyle (cond
                  ((string-equal contentStatus "Available Online") "btn-danger")
                  ((string-equal contentStatus "Digital Only") "btn-danger")
                  ((string-equal contentStatus "Readable Online") "btn-success")
                  ((string-equal contentStatus "Purchased") "btn-primary")
                  (t "btn-dark")
                  ))
    buttonStyle
    )

  (defun csvListToButton (content type)
    "Given a csv list, generate a bootstrap button string"
    (setq
     buttonLabel (concat "<span class=\"badge text-bg-light\">" (contentTypeToButtonLabel content type) "</span>")
     buttonStyleClass (contentStatusToButtonStyleClass content type)
     buttonSubtitle (if (string-equal "" (getTypeSubtitle type content)) "" (concat "<br><span><small>" (getTypeSubtitle type content) "</small></span>"))
     buttonExtra (if (string-equal "wantedAlbum" type) (concat "<br>" (nth 2 content)) "") ;; wantedAlbum price
     buttonLink (getTypeLink type content) ;; link
     buttonTitle (getTypeTitle type content) ;; title
     buttonsHtml (concat
                  "<div class=\"col my-1\">"
                  "<a role=\"button\" class=\"w-100 btn text-wrap "
                  type
                  " "
                  buttonStyleClass
                  "\" href=\""
                  buttonLink
                  "\" >"
                  buttonTitle
                  " "
                  buttonLabel
                  buttonSubtitle
                  buttonExtra
                  "</a></div>"
                  )
     )
    buttonsHtml
    )

  (defun csvToHtml (type group_Html csvLine)
    "Fold function to return html bootstrap list:
      - Current group Empty     / Previous Group Empty -> button
      - Current group Empty     / Previous Group non-Empty -> close dropdown
      - Current group non-Empty / Previous Group Empty -> dropdown button with 1 link
      - Current group non-Empty == Previous Group non-Empty -> 1 link
      - Current group non-Empty != Previous Group non-Empty -> close dropdown + dropdown button with 1 link"
    (setq
     currentGroup  (getTypeGroup type csvLine)
     previousGroup (car group_Html)
     previousHTML  (nth 1 group_Html)
     elemLink      (getTypeLink type csvLine)
     elemLabel     (concat "<span class=\"badge text-bg-light\">" (contentTypeToButtonLabel csvLine type) "</span>")
     elemTitle     (getTypeTitle type csvLine)
     elemSubtitle  (if (string-equal "" (getTypeSubtitle type csvLine)) "" (concat "<br><span><small>" (getTypeSubtitle type csvLine) "</span></small>"))
     elemExtra     (if (string-equal "wantedAlbum" type) (concat "<br>" (nth 2 csvLine)) "") ;; wantedAlbum price
     dropdownLink (concat  "<li><a class=\"dropdown-item "
                           type
                           "\" href=\""
                           elemLink
                           "\">"
                           elemTitle
                           " "
                           elemLabel
                           elemSubtitle
                           elemExtra
                           "</a></li>")
     closeDropdown (concat "</ul>" "</div>")
     openDropdown (concat
                   "<div class=\"col my-1 dropdown\"> <button class=\"btn btn-secondary dropdown-toggle w-100 text-wrap book btn-dark\" type=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">"
                   currentGroup
                   "</button> <ul class=\"dropdown-menu dropdown-menu-dark\">"
                   dropdownLink
                   )
     button (csvListToButton csvLine type)
     newHTML (cond
                   ((and (string= "" currentGroup) (string= "" previousGroup)) button)
                   ((and (string= "" currentGroup) (not (string= "" previousGroup))) (concat closeDropdown button))
                   ((and (not (string= "" currentGroup)) (string= "" previousGroup)) openDropdown)
                   ((string-equal currentGroup previousGroup) dropdownLink)
                   ((not (string-equal currentGroup previousGroup)) (concat closeDropdown openDropdown))
                   )
     )
    (list currentGroup (concat previousHTML newHTML))
    )

  (setq csvFileContentLines (cdr (pcsv-parse-file csvFilePath))
        HTML (nth 1 (-reduce-from (lambda (group_html csvLine) (csvToHtml type group_html csvLine)) (list "" "") csvFileContentLines))
        result (concat
                "<div class=\"container text-center\"> <div class=\"row row-cols-1 row-cols-sm-2 row-cols-xl-4 align-items-center\">"
                HTML
                "</div></div>"
                )
        )

  ;; (message "%s" result)
  result
#+end_src

