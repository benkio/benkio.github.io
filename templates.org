* Wrap input into a javascript tag
#+name: inline-js
#+begin_src elisp :exports none :results html :var blk=""
(concat
 "<script type=\"text/javascript\">\n"
 (cadr (org-babel-lob--src-info blk))
 "\n"
 "</script>")
#+end_src

* Navbar

#+name: navbar
#+begin_src elisp :exports none :results html :var page=1
  (setq blogActive        (if (eq page 1) "active" "")
        articlesActive    (if (eq page 2) "active" "")
        booksActive       (if (eq page 3) "active" "")
        albumsActive      (if (eq page 4) "active" "")
        noteTrainerActive (if (eq page 5) "active" "")
        )

  (format "<a target=\"_self\" class=\"navbar-brand\" href=\"/index.html\">
    <img class=\"img-circle rounded-circle\" src=\"https://www.gravatar.com/avatar/aa7f68a32b011ac94698a7a1cb16ffc8?s=200\" width=\"50px\"/>
  </a>
  <button class=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">
    <span class=\"navbar-toggler-icon\"></span>
  </button>
  <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">
    <ul class=\"navbar-nav me-auto mb-2 mb-lg-0\">
      <li class=\"nav-item\"> <a class=\"nav-link fs-4 %s\"        aria-current=\"page\" target=\"_self\" href=\"/blog.html\">Blog</a> </li>
      <li class=\"nav-item\"> <a class=\"nav-link fs-4 %s\"        aria-current=\"page\" target=\"_self\" href=\"/articles.html\">Articles</a> </li>
      <li class=\"nav-item\"> <a class=\"nav-link fs-4 %s\"        aria-current=\"page\" target=\"_self\" href=\"/books.html\">Books</a> </li>
      <li class=\"nav-item\"> <a class=\"nav-link fs-4 %s\" aria-current=\"page\" target=\"_self\" href=\"/albums.html\">Albums</a> </li>
      <li class=\"nav-item\"> <a class=\"nav-link fs-4 %s\"        aria-current=\"page\" target=\"_self\" href=\"/NoteTrainer/NoteTrainer.html\">Note Trainer</a> </li>
    </ul>
  </div>" blogActive articlesActive booksActive albumsActive noteTrainerActive)
#+END_SRC
* Compile Org Files

Look at the org files modified within 4 months and compile them using ~org-twbs-export-to-html~

#+name: compileOrgFiles
#+begin_src elisp :exports none :results none :var path="./articles/"
  (setq timeToArchiveInMonth 4
        timeToArchiveInMonthSeconds (* timeToArchiveInMonth 2592000)
        ;; path "./articles/"
        )
  (mapc
   (lambda (f) (progn
                 (when (time-less-p (time-add (current-time) (- 0 timeToArchiveInMonthSeconds )) (nth 5 (file-attributes f)))
                   (message "compile org file %s" f)
                   (find-file f)
                   (org-twbs-export-to-html)
                   (kill-buffer)
                   )))
   (directory-files path t "\.org$"))
  nil
#+end_src

* Articles HTML files to JS

- Gets all the HTML files
- Read it's contents and strip the unecessary values
- Insert the contents (Abstracts) into a js array
- Wrap it with javascript tag
- Return the Text

#+name: articlesRelativePaths
#+begin_src elisp :exports none :results html
  (progn
    (defun ListToJsArray (elist varName)
      (setq almostJSVar (seq-reduce (lambda (acc content)(concat acc "\"" content "\"" ",")) elist (concat "var " varName " = ["))
             almostJSVarLeng (length almostJSVar)
            )
      (concat (substring almostJSVar 0 (- almostJSVarLeng 1)) "];")
      )
    (setq
     filePaths (mapcar (lambda (fileName) (concat "./articles/" fileName))
                       (directory-files "./articles/" nil "\.html$"))
     fileContents (mapcar (lambda (filePath) (with-temp-buffer
                                               (insert-file-contents filePath)
                                               (search-forward "outline-container-Article")
                                               (beginning-of-line)
                                               (kill-region (point-min) (point))
                                               (search-forward "outline-container-ShareButtons")
                                               (beginning-of-line)
                                               (kill-region (point) (point-max))
                                               (goto-char (point-min))
                                               (replace-string "/" "\\/")
                                               (goto-char (point-min))
                                               (replace-string "\n" "")
                                               (goto-char (point-min))
                                               (replace-string "'" "\\'")
                                               (goto-char (point-min))
                                               (replace-string "\"" "\\\"")
                                               (buffer-string)
                                               )
                            )
                          filePaths)
     )
    (concat
     "<script type=\"text/javascript\">\n"
     (ListToJsArray (reverse fileContents) "htmlArticles")
     "\n"
     (ListToJsArray (reverse filePaths) "htmlArticlesPaths")
     "\n"
     "</script>")
    )
#+end_src

* Parse CSV File

Given a CVS file path:
- Read it
- Create a string representing a html bootstrap buttons
- Return it

#+name: csvToButtonsLinks
#+begin_src elisp :exports none :results html :var csvFilePath="" type=""
  (require 'pcsv)
  (require 'seq)

  (defun getTypeIndex (type)
    "Given the input type (book, wantedBook, albums...) it returns the index of the csv type column
    Audiobook Eng/Ita, Manga
    "
    (cond
     ((string-equal type "book") 4)
     ((string-equal type "wantedBook") 3)
     (t -1)
     )
    )

  (defun getTypeLinkIndex (type)
    "Given the input type (book, wantedBook, albums...) it returns the index of the csv link column"
    (cond
     ((string-equal type "book") 5)
     ((string-equal type "album") 2)
     ((string-equal type "wantedBook") 5)
     ((string-equal type "wantedAlbum") 4)
     (t -1)
     )
    )

  (defun getTypeTitleIndex (type)
    "Given the input type (book, wantedBook, albums...) it returns the index of the csv title column"
    (cond
     ((string-equal type "book") 2)
     ((string-equal type "album") 1)
     ((string-equal type "wantedBook") 1)
     ((string-equal type "wantedAlbum") 1)
     (t -1)
     )
    )

  (defun getTypeStatusIndex (type)
    "Given the input type (book, wantedBook, albums...) it returns the index of the csv status column
     Digital Only, Available/Readable Online, Purchased
    "
    (cond
     ((string-equal type "wantedBook") 4)
     ((string-equal type "wantedAlbum") 3)
     (t -1)
     )
    )

  (defun getTypeSubtitleIndex (type)
    "Given the input type (book, wantedBook, albums...) it returns the index of the csv status column
    "
    (cond
     ((string-equal type "book") 3)
     ((string-equal type "wantedBook") 2)
     ((string-equal type "album") 0)
     ((string-equal type "wantedAlbum") 0)
     (t -1)
     )
    )

  (defun contentTypeToButtonLabel (content type)
    "Given the content and type it returns the related button label"
    (setq
     contentStatus (nth (getTypeIndex type) content)
     buttonLabel (cond
                   ((string-equal contentStatus "Audiobook Ita") "<span class=\"label label-primary\">Audiobook Ita</span>")
                   ((string-equal contentStatus "Audiobook Eng") "<span class=\"label label-success\">Audiobook Eng</span>")
                   ((string-equal contentStatus "Manga") "<span class=\"label label-warning\">Manga</span>")
                   (t "")
                   ))
    buttonLabel
    )

  (defun contentStatusToButtonStyleClass (content type)
    "Given the content and type it returns the related button style class"
    (setq
     contentStatus (nth (getTypeStatusIndex type) content)
     buttonStyle (cond
                   ((string-equal contentStatus "Available Online") "btn-danger")
                   ((string-equal contentStatus "Digital Only") "btn-danger")
                   ((string-equal contentStatus "Readable Online") "btn-success")
                   ((string-equal contentStatus "Purchased") "btn-primary")
                   (t "btn-dark")
                   ))
    buttonStyle
    )

  (defun csvListToButton (content type)
    "Given a csv list, generate a bootstra button string"
    (setq
     buttonLabel (contentTypeToButtonLabel content type)
     buttonStyleClass (contentStatusToButtonStyleClass content type)
     buttonSubtitle (if (string-equal "" (nth (getTypeSubtitleIndex type) content)) "" (concat "<br><span><small>" (nth (getTypeSubtitleIndex type) content) "</span></small>"))
     buttonExtra (if (string-equal "wantedAlbum" type) (concat "<br>" (nth 2 content)) "") ;; wantedAlbum price
     )
    (concat
     "<button type=\"button\" class=\"m-2 btn "
     type
     " "
     buttonStyleClass
     "\" style=\"max-width: 20%;\" onclick=\"window.open('"
     (nth (getTypeLinkIndex type) content) ;; link
     "','_blank');\" >"
     (nth (getTypeTitleIndex type) content) ;; title
     " "
     "<span class=\"badge text-bg-light\">"buttonLabel "</span>"
     buttonSubtitle
     buttonExtra
     "</button>"
     )
    )

  (setq csvFileContentLines (cdr (pcsv-parse-file csvFilePath))
        csvFileButtons (mapcar (lambda (csvLine) (csvListToButton csvLine type)) csvFileContentLines)
        )

  (mapconcat 'identity csvFileButtons "\n")
#+end_src

