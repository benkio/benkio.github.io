#+name: inline-js
#+begin_src elisp :exports none :results html :var blk=""
(concat
 "<script type=\"text/javascript\">\n"
 (cadr (org-babel-lob--src-info blk))
 "\n"
 "</script>")
#+end_src

#+name: compileOrgArticles
#+begin_src elisp :exports none :results output
(mapc 
  (lambda (f) (progn 
                (message "file %s" f)
                (find-file f)
                (org-twbs-export-to-html)
                (kill-buffer)
                ))
  (directory-files "./articles/" t "\.org$"))

#+end_src

#+name: articlesRelativePaths
#+begin_src elisp :exports none :results html
(progn
  (defun ListToJsArray (elist varName)
    (setq almostJSVar (seq-reduce (lambda (acc content)(concat acc "\"" content "\"" ",")) elist (concat "var " varName " = ["))
           almostJSVarLeng (length almostJSVar)
          )
    (concat (substring almostJSVar 0 (- almostJSVarLeng 1)) "];")
    )
  (setq
   filePaths (mapcar (lambda (fileName) (concat "./articles/" fileName))
                     (directory-files "./articles/" nil "\.html$"))
   fileContents (mapcar (lambda (filePath) (with-temp-buffer
                                             (insert-file-contents filePath)
                                             (search-forward "outline-container-Article")
                                             (beginning-of-line)
                                             (kill-region (point-min) (point))
                                             (search-forward "outline-container-ShareButtons")
                                             (beginning-of-line)
                                             (kill-region (point) (point-max))
                                             (goto-char (point-min))
                                             (replace-string "/" "\\/")
                                             (goto-char (point-min))
                                             (replace-string "\n" "")
                                             (goto-char (point-min))
                                             (replace-string "'" "\\'")
                                             (goto-char (point-min))
                                             (replace-string "\"" "\\\"")
                                             (buffer-string)
                                             )
                          )
                        filePaths)
   )
  (concat
   "<script type=\"text/javascript\">\n"
   (ListToJsArray fileContents "htmlArticles")
   "\n"
   (ListToJsArray filePaths "htmlArticlesPaths")
   "\n"
   "</script>")
  )
#+end_src
