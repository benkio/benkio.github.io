#+name: inline-js
#+begin_src elisp :exports none :results html :var blk=""
(concat
 "<script type=\"text/javascript\">\n"
 (cadr (org-babel-lob--src-info blk))
 "\n"
 "</script>")
#+end_src

#+name: compileOrgArticles
#+begin_src elisp :exports none :results output
(mapc 
  (lambda (f) (progn 
                (message "file %s" f)
                (find-file f)
                (org-twbs-export-to-html)
                (kill-buffer)
                ))
  (directory-files "./articles/" t "\.org$"))

#+end_src

#+name: articlesRelativePathsPaginated
#+begin_src elisp :exports none :results html :var page=1
(progn
  (setq fileContents (mapcar (lambda (filePath) (with-temp-buffer
                                                  (insert-file-contents (concat "./articles/" filePath))
                                                  (goto-char (point-min))
                                                  (replace-string "/" "\\/")
                                                  (goto-char (point-min))
                                                  (replace-string "\n" "")
                                                  (goto-char (point-min))
                                                  (replace-string "'" "\\'")
                                                  (goto-char (point-min))
                                                  (replace-string "\"" "\\\"")
                                                  (buffer-string)
                                                  )
                               )
                             (directory-files "./articles/" nil "\.html$"))
        almostJSVar (seq-reduce (lambda (acc fileContent)(concat acc "\"" fileContent "\"" ",")) (seq-take (seq-drop fileContents (* 5 (- page 1))) 5) "var htmlArticles = [")
        almostJSVarLeng (length almostJSVar)
        JSVar (concat (substring almostJSVar 0 (- almostJSVarLeng 1)) "];")
        )
  (concat
   "<script type=\"text/javascript\">\n"
   JSVar
   "\n"
   "</script>")
  )
#+end_src
