#+OPTIONS: num:nil toc:t H:4
#+OPTIONS: html-preamble:nil html-postamble:nil html-scripts:t html-style:nil
#+TITLE: Gilded Rose Kata
#+DESCRIPTION: Gilded Rose Kata
#+KEYWORDS: Gilded Rose Kata
#+CREATOR: Enrico Benini
#+HTML_HEAD_EXTRA: <link rel="shortcut icon" href="../../images/favicon.ico" type="image/x-icon">
#+HTML_HEAD_EXTRA: <link rel="icon" href="../../images/favicon.ico" type="image/x-icon">
#+HTML_HEAD_EXTRA:  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.13.0/css/all.min.css">
#+HTML_HEAD_EXTRA:  <link href="https://fonts.googleapis.com/css?family=Montserrat" rel="stylesheet" type="text/css">
#+HTML_HEAD_EXTRA:  <link href="https://fonts.googleapis.com/css?family=Lato" rel="stylesheet" type="text/css">
#+HTML_HEAD_EXTRA:  <link rel="stylesheet" href="../css/main.css">
#+HTML_HEAD_EXTRA:  <link rel="stylesheet" href="../css/blog.css">
#+HTML_HEAD_EXTRA:  <link rel="stylesheet" href="../css/article.css">

* Blog
  :PROPERTIES:
  :HTML_CONTAINER_CLASS: text-center navbar navbar-inverse navbar-fixed-top
  :CUSTOM_ID: navbar
  :END:
  #+BEGIN_EXPORT html
  <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#collapsableNavbar">
    <span class="icon-bar"Article 6</span>
    <span class="icon-bar"></span>
    <span class="icon-bar"></span>
  </button>
  <a title="Home" href="../blog.html"><h1 id="navbarTitle" class="navbar-text">Blog</h1></a>
  <div class="collapse navbar-collapse" id="collapsableNavbar">
    <ul class="nav navbar-nav">
      <li><a title="Home" href="../index.html"><i class="fas fa-home fa-3x" aria-hidden="true"></i></a></li>
      <li><a title="Article List" href="../articleList.html" class="navbar-text h3">Article List</a></li>
  <li><a title="Book List" href="../bookList.html" class="navbar-text h3">Book List</a></li>
  <li><a title="Album List" href="../albumList.html" class="navbar-text h3">Album List</a></li>
    </ul>
  </div>
  #+END_EXPORT

* Gilded Rose Kata
  :PROPERTIES:
  :CUSTOM_ID: Article
  :END:
  *Created: <2020-06-30 Tue>*
** Abstract
   :PROPERTIES:
   :CUSTOM_ID: ArticleAbstract
   :END:

   Not so long ago. I watched the mighty [[https://twitter.com/NicolasRinaudo][Nicolas Rinaudo]] dealing with
   the [[https://github.com/emilybache/GildedRose-Refactoring-Kata][Gilded Rose Kata]] on the [[https://www.twitch.tv/scalalove][Scalalove's twitch channel]]. and that
   inspired me into trying it out using my favorite languages: Scala &
   Haskell.

   I'll structure the article in this way:
   1. I get familiar with the actual code-base, analyze it, and
      explain what are the (main) flaws I can see.
   2. Following the previous point, I write down the approach I'll
      use.
   3. Execution time with a brief log journal of what was done.
   4. Then, It's time to point out the difficulties I have found with
      both Scala and Haskell and I will try to do a comparison between the
      two.

   Both points 1 and 2 will be language-independent

** Content
   :PROPERTIES:
   :CUSTOM_ID: ArticleContent
   :END:

*** Codebase State
    :PROPERTIES:
    :CUSTOM_ID: CodebaseStateContent
    :END:

    In order to write this section, I just need to access the [[https://github.com/emilybache/GildedRose-Refactoring-Kata][Github kata
    repo]] and do a good, old, code review. I will take Scala as a
    reference since I feel more comfortable with the technology.

    *Disclaimer:* this code is intentionally bad. If you will ever
    encounter a code-base like this one in your life, listen to me...

    #+html: <iframe src="https://giphy.com/embed/A6PcmRqkyMOBy" width="480" height="224" frameBorder="0" class="giphy-embed" allowFullScreen></iframe>

    let's start...

    First thing first, I see there are no tests. That needs to be
    fixed ASAP. We will talk about that in the [[#SolutionApproachTestsContent][specific section]].

    Then, I see an attempt of a /[[https://en.wikipedia.org/wiki/Domain_model][Domain Model]]/. That's actually a good
    practice: design your types first and be as picky as possible in
    order to [[https://fsharpforfunandprofit.com/posts/designing-with-types-making-illegal-states-unrepresentable/][make the illegal states unrepresentable]]. The problems here
    are several
    + The ~var~ keyword, that means mutability. As a software engineer, I
      know that mutable state can be hard to manage and lead to unintended
      behaviours. Doing a quick sneak peek to the Haskell code I see
      there's none. Mutation is possible in Haskell too, but luckily we got
      spared this time. I will talk a little bit more about mutation
      in the [[#LaguagesComparisonConclusions][Languages Comparison Section]].
    + Just Item Type!! There are two possible cases for this: the problem is
      extremely simple or we are missing some types here.
    + No validations. I expect to see some data validation hiding
      somewhere in the algorithm. Basically every piece of code has it
      because we need to ensure that the values we are going to manage
      remains valid throughout the program execution.

    Regarding the main algorithm, we have:
    1. One giant function. OK, that is, in the end, what the CPU will
       execute: 1 operation at a time(mono-core,
       single-thread). However, the code needs to be
       human-readable. /Any fool can write code that a computer can understand. Good programmers write code that humans can understand./ (Martin Fowler) Plus, it violates the [[https://en.wikipedia.org/wiki/Single-responsibility_principle][Single
       Responsibility Principle]].
    2. Mutation again! Apart from the items fields, that was expected,
       there's also into the index variable ~i~. Luckily, it is just
       used to select the current element to evaluate, it could have
       been way worse, like a different algorithm for odd and even
       elements, checks on the index, and so on. üòñ
    3. There should be Types and a compiler somewhere, but I don't see
       any usage of those in here. The code is nearly indistinguishable
       from Javascript.
    4. Nested Ifs statements.

*** Solution Approach
    :PROPERTIES:
    :CUSTOM_ID: SolutionApproachContent
    :END:

    After the code review we know the issues of the code and we can
    come up with a plan. Here, I'll prioritise the tasks we need to do
    in order to make this code better and solve the Kata.

**** Tests
     :PROPERTIES:
     :CUSTOM_ID: SolutionApproachTestsContent
     :END:

     The first task needed is a good test suite. With proper testing, we
     will be sure that the changes we are going to make are
     correct. After all, the definition of /[[https://en.wikipedia.org/wiki/Code_refactoring][Code Refactoring]]/ is to *NOT*
     change the program behavior.

     Now, the test suite can be crafted using multiple techniques and it's a
     huge topic by itself. In this case, testing is not the main focus of
     the kata but still key. Fortunately, it's a simple, little, local
     program. So we should be fine with just /[[https://en.wikipedia.org/wiki/Unit_testing][Unit Testing]]/ and /[[https://en.wikipedia.org/wiki/System_testing][System Testing]]/.

     Usually, testing is done by providing some specific input data to
     the program, fetch the result of the computation, and then
     compare it with what is expected. That's completely fine and it's
     what the majority of the companies do nowadays. The downside of
     this approach is: it's static. Let say your program has a bug and
     will crash under specific conditions, for a corner case you
     didn't think about, testing by example will not help you there if
     you didn't catch that specific case beforehand.

     A different approach I like more is [[https://en.wikipedia.org/wiki/Property_testing][Property Testing]], where the
     input data is *generated*. The software engineer defines the
     input generation rules, used by the supporting library/framework,
     and then the expected behavior as a property. I won't go deeper
     into it, but the typical example is the /associativity law/ of
     the sum. Definitely, the most complicated part is to identify the
     properties of your program, but in my honest opinion, I still see
     benefits in just take advantage of the generated inputs and
     having a "normal" test built on top. Having to write your test
     once and run them multiple times with several inputs, it's
     straight away a big plus.

     Another downside of this approach is the computational cost:
     generating inputs and having multiple runs will increase the
     testing time. In fact, if you mess up the way you generate your
     input, you couldn't even be able to run your test at all,
     obtaining the "infinite loop effect" at the time of
     execution. For example, I learnt by experience that, operators
     like ~suchAs~ must be used very carefully.

     **Edit:** Since we have even the specs of the program the
     property base testing fits super nicely: convert phrases like

     /‚ÄúSulfuras‚Äù, being a legendary item, never has to be sold or
     decreases in Quality/

     becomes quite a natural process.

**** Split the Monster
     :PROPERTIES:
     :CUSTOM_ID: SolutionApproachSplitMonsterContent
     :END:

     Once we have the testing set up properly, we can start to break
     stuff using the üî®.

     The Most annoying thing in the codebase is the giant
     stand-alone function. I will tackle this by splitting that
     function into two or more sub-functions. Then, repeat the same
     approach for the outcoming functions. This recursive process
     will terminate when the functions I end up with have a small
     number of lines of code and one single mutation in it, simple as
     that.

     A little but key detail in all of this is that each function will
     return a value, and the parent function will be a composition of
     its child.

     This works well when you have 2 consecutive if-statements or an
     if-else-statement:

#+BEGIN_SRC scala
// Before
if (condition1) {
  if (condition3) {
   // Stuff
  } else // Stuff
}
if (condition2) {
// Stuff
} else // Stuff

// After
def f1(params): StuffType = if (condition1) { f3(params) } else // Previous state (identity)
def f2(params): StuffType = if (condition2) {/* Stuff */ } else // Stuff
def f3(params): StuffType = if (condition3) {/* Stuff */ } else // Stuff
val r1 = f1(args)
val r2 = f2(args) // This might probably require r1 as input
r2
#+END_SRC

     This might seems controversial and more complicated, but it helps
     to put the computations in context. This way, you don't need to
     go and look into the content of the functions, you can just skip
     their implementation details and get an overall feeling of the
     data-flow. Plus, you could not realize it yet, but doing so, we
     also put types back into play!

     You might also notice I added an else to the first if, that's
     because I want the wrapping function to actually return a type
     and, since there wasn't an else in that case, the result will be
     the previous input. When the else branch is chosen the ~f1~
     function will behave as the [[https://en.wikipedia.org/wiki/Identity_function][Identity Function]].

     In the very end, I want also to grab your attention on the way
     this approach penetrates the nested ifs and allows us to collapse the
     structure. Of course, we could also merge ~condition1~ and
     ~condition3~, and we might actually decide to do that in a later
     stage, but let us suppose we will discover that the same logic of
     ~f3~ is reused. This way we can just call ~f3~ since it's
     independent from the rest.

     *Edit:* a very important aspect when comes to refactoring is KNOW
     WHEN TO COMMIT. In my opinion, the right time is when all of the
     following conditions hold:
     1. Your tests are green
     2. You are not in the middle of a change (you know what to do
        next)
     3. You are on stand-by, thinking about the next move (related to
        point 2)

     Doing like that will ensure that you commit quite often and you
     can roll back to a /safe-state/ without loosing too much
     time. Otherwise, you might don't want to roll back because your
     last commit was 2h ago, but you can't keep up because you are
     stuck for some reason.

     *Edit:* Since this specific problem is mainly just nested if, at
     some point, we actually want to merge them together and collapse
     some of the independent functions into one. You might think that
     we will roll back to the start, but we can instead take
     advantage of specific language constructs, like pattern matching,
     to keep the structure flat.

**** Dealing With Mutation once and for All
     :PROPERTIES:
     :CUSTOM_ID: SolutionApproachMutationContent
     :END:

     Everything is in its own box, each one returning a value üíú,
     However... it still mutates and internal field!! üòû

     Anyway, due to the previous steps, we can easily remove that
     mutation from the algorithm and the model itself, returning a new
     copy of the input with the requested changes.

     **Edit:** Reading the specification I found I'm not allowed to
       touch the ~Item~ class, unfortunately. Then, this step will
       remain theoretic. What we can do is to add other types around
       the main one, those will helps us to structure our code and
       give to each bit of logic its own context.

**** Refinement & New feature
     :PROPERTIES:
     :CUSTOM_ID: SolutionApproachRefinementNewFeatureContent
     :END:


     Finally, with this new working codebase, we should be able to:
     * Merging condition together.
     * Adding fields validation or other helpful functions,
     * Adding new types.
     * Structuring the code: moving the functions to the model companion
       objects, in case of Scala, or to a separate module.

     Once the code is finally in good shape, we can:
     1. See some pattern emerge clearly and properly design the rest
        of the code to expose them: moving the logic to proper new
        types that communicate the intention of the code.
     2. easily add the new feature. It should be quite simple since
        the new item to evaluate, require a logic that is already shared
        with another item.

     Now that we have a plan, let's start the fun part...let's
     executed it!

     **Edit:** Sometimes you need to do some refinements listed
     here even in earlier stages because, doing it earlier, helps you
     very much rather then postpone the change. Anyway, my suggestion is to
     refine as little as possible in the beginning, only when it's necessary.

*** Scala Kata
    :PROPERTIES:
    :CUSTOM_ID: ScalaContent
    :END:

    <2020-07-02 Thu>: Started the scala exercise from testing and
    [[https://www.scalacheck.org/][Scalacheck]]. Get stuck on some test corner case, but with some
    ~println~ I figured it out. [[https://github.com/benkio/GeneralExercises/commit/8e066e5cc678518f6f10147f7280969dce245be2][commit]]

    <2020-07-03 Fri>: Finished Scala's tests. Fixed some errors in
    the making. Now we can move to the actual code. [[https://github.com/benkio/GeneralExercises/commit/19c8b9e][commit]]

    <2020-07-04 Sat>: split the monster. now I have several
    functions, returning Items containing only one if statement as
    a body. No more if indentation anywhere. Plus:
    + Introduced new types wrapper and aliases for the fields
    + Defer/remove mutation as much as possible. Only at the end of
      the ~foreach~.
    + Extracted main operation on types to companion objects.
    + Merged the functions into one calling only basic operations
    [[https://github.com/benkio/GeneralExercises/commit/9fdc7be][commit]]

    <2020-07-05 Sun>: Since the specs just tell us to not touch the
    ~Item~ class, I can change the return type of the ~updateQuality~
    to be the new value. In this way, we avoid mutation of the item
    array. After that, we can see the pattern composed by a
    pre-quality calculation, an increase in sellIn value, a final
    adjustment. Then, we can create subtypes of the item class and put
    the specific logic into each class. This way we can get rid of the
    big remaining functions. Afterward, we can add the new class for
    the new item easily. Work is done! [[https://github.com/benkio/GeneralExercises/commit/03ac121][commit]]

    #+html: <hr/>

    I just tried to reproduce the counterintuitive behavior I faced
    when subtyping, but when I went to [[https://scastie.scala-lang.org/][Scastie]], the code behaved as
    expected. This makes it even most weird ü§î if you are a programmer,
    you know these kinds of things happens from time to time.

*** Haskell Kata
    :PROPERTIES:
    :CUSTOM_ID: HaskellContent
    :END:

    <2020-07-08 Wed>: Started the tests: Sulfuras + AgedBrie. [[https://github.com/benkio/GeneralExercises/commit/ea0b859][commit]]

    <2020-07-13 Mon>: Added the BackstagePasses test + test
    refactoring [[https://github.com/benkio/GeneralExercises/commit/8a9a98b][commit]]

    <2020-07-14 Tue>: Test completed. [[https://github.com/benkio/GeneralExercises/commit/f19fa11][commit]]

    <2020-07-15 Wed>: Started to split the monster. Added
    Hlint, you can't imagine how many /redundant brackets/ I removed. [[https://github.com/benkio/GeneralExercises/commit/acce770][commit]]

    <2020-07-16 Thu>: Add a ~newtype~ for the quality field, add the
    special item type, setup the ~HasQuality~ typeclass, merged if
    functions together into a guard function. [[https://github.com/benkio/GeneralExercises/commit/89db36e][commit]]

    <2020-07-16 Thu>:
    * Implemented typeclass instances and used instead of plain
      functions
    * Moved all the logic about items in a separate file
    * Finished the refactoring
    * Added the new special item Conjured
    * Added the new test
    * Implemented the type class instances
    *KATA DONE* [[https://github.com/benkio/GeneralExercises/commit/9205f58][commit]]
** Conclusions
   :PROPERTIES:
   :CUSTOM_ID: ArticleConclusions
   :END:

*** Main Challenges
    :PROPERTIES:
    :CUSTOM_ID: MainChallengesConclusion
    :END:

    The first challenge that comes into my mind is test
    crafting. During this kata you really understand the importance of
    having a very well done test code. Most of the time we think test
    code is B-class code, but this kata shows it's not. It needs to be
    very fine-tuned and precise in order to catch bugs ahead of
    time. Plus, test-code is code you need to maintain and write
    daily, to write your feature. That makes it on the same level of
    importance as the production code.

    I agree it's not great fun to write such code, that's why I
    suggest using the compiler as much as possible to reduce the
    design space and the amount of tests you need to write to cover
    your application.

    A second relevant challenge is about being
    disciplined. Refactoring consists of very small changes, but this is
    not always possible. Sometimes, you need to break quite some amount
    of code at once, but that must be an exception to the regular
    refactoring process. What can happen is that we might see multiple
    applicable improvements at the same time. Therefore, we are
    tempted to apply them all at once, instead, we should hold back
    and do one single, small, consistent change, commit it, and then
    move on to the next. This requires great self-discipline.

    Finally, the last challenge is definitely /dependencies/. When you
    have constraints from different libraries or legacy code that
    you are not allowed to change, it makes things very difficult and
    requires you to put workarounds in place. That defiles the goal of
    refactoring itself. This shows the importance of keeping projects
    small and self-contained as much as possible, with the minimal set
    of dependencies as possible.

*** Languages Comparison
    :PROPERTIES:
    :CUSTOM_ID: LaguagesComparisonConclusions
    :END:

    Before diving into the differences I found between the two
    technologies, I need to do a little disclaimer in order to give to
    my follow-up words a little bit of context. What I will write is a
    personal opinion, after all, it's not based on facts, but on
    personal experience. Therefore, it depends on: my emotions
    throughout the exercise, how fluent I am on both languages, and how
    much I know about the problem (the order in which I solved the
    kata might have influenced me). Probably this disclaimer should have been
    placed at the very start of this article üò∫.

    One of the first differences I felt, when dealing with tests in
    Haskell, was that I was pushed way more into abstracting things
    compared to Scala and I might figure out why.

    In Scala, if a test fails, what I usually do to debug it is:
    putting a break point or a ~println~ and see what is the input to
    the test, the result an so on. Once I know what is going on, it's
    usually an easy fix: the generator wasn't right, the success
    condition wasn't correct etc.

    This approach doesn't hold in Haskell because you can't put a
    simple ~println~ into the test, so you need to work differently
    and, as a result, you end up with better code. The only way to
    inspect your test is to use the REPL and, when you get into it,
    you want to be able to execute exactly the bit of code you are
    interested in, the minimal amount of code where the bug might
    hide. To achieve this goal you need to extract the logic of your
    tests into small functions and enhance the re-usability as much as
    possible. This should always be the case, for whatever language
    you are using, but I strongly believe that, if something is not
    forced by the technology and the responsibility of "doing the
    right thing" is on the shoulder of the developer, laziness and
    negligence will eventually sometimes kick in and drive it to a
    sub-optimal result.

    Moving on, the next difference, we can see from the initial
    codebase status that Haskell comes with immutability straight
    away. Even if it doesn't seem very important, this is a big
    improvement, especially when things scale up in size. Then, you
    could achieve mutation in Haskell as well using specific
    constructions like [[https://www.oreilly.com/library/view/parallel-and-concurrent/9781449335939/ch07.html][MVar]] or [[https://wiki.haskell.org/Software_transactional_memory][STM]] (used mainly for concurrency
    purposes), but even then, mutation is enclosed and accessible
    under a specific contract where particular constraints hold.

    Moreover, I found the starting impact of the refactoring less
    scary than the Scala one. I guess the reason is because I
    already know the context, but I was able to give a meaningful name
    to the extracted functions straight away because of the usage of
    the ~where~ and ~let-in~ constructs.

    #+BEGIN_SRC haskell
    src/GildedRose.hs:53:29: Warning: Redundant if
Found:
  if sellIn < 6 then if quality < 48 then 1 else 0 else 0
Perhaps:
  if (sellIn < 6) && (quality < 48) then 1 else 0
    #+END_SRC

    *[[https://github.com/ndmitchell/hlint][Hlint]] is cheating in this exercise* and it works only because
    each redundant ifs has to return a value. Scala also has similar
    tools, like [[https://github.com/scalacenter/scalafix][Scalafix]], but it slipped out of my mind. With it, I
    would have struggled less.

    A downside of plain Haskell, in comparison to Scala, is the amount
    of machinery you have to create in order to do simple things, such
    as just access fields. Don't get me wrong here, I'm sure that
    through some specific compiler extension, or using [[http://wiki.haskell.org/Template_Haskell][Template
    Haskell]], a cleaver/experienced haskeller can easily overcome this
    limitation, auto-generating instances for example. Anyway, I'm not
    a great Haskell developer and I just wanted to compare the two
    languages out of the box, with minimal overhead possible. A
    possible justification I can think of is that Haskell prefers to
    keep a minimal core, and then it allow you to integrate the
    language using external modules/extensions/libraries. As a result,
    it's often told that Commercial Haskell is far different from the
    plain language, due to the high amount of pieces involved that
    completely turn upside-down the syntax.

*** Final words
    :PROPERTIES:
    :CUSTOM_ID: LaguagesComparisonConclusions
    :END:

    To be completely honest I must say that most of the concepts I
    showed here are quite old and you can find them into details from
    several famous books, such as [[https://martinfowler.com/books/refactoring.html][Refactoring by Martin Fowler]].

    Anyway you can see here is the application of some of those
    principles, plus how picking a FP based technology can speed up
    the process by a lot.

    I really hope you enjoyed reading this article and expired you into
    trying this kata, especially if you aren't confident with
    Refactoring practices.

* Share Buttons
  :PROPERTIES:
  :CUSTOM_ID: ShareButtons
  :END:
  #+BEGIN_EXPORT html
  <!-- AddToAny BEGIN -->
  <hr>
  <div class="a2a_kit a2a_kit_size_32 a2a_default_style">
  <a class="a2a_dd" href="https://www.addtoany.com/share"></a>
  <a class="a2a_button_facebook"></a>
  <a class="a2a_button_twitter"></a>
  <a class="a2a_button_whatsapp"></a>
  <a class="a2a_button_telegram"></a>
  <a class="a2a_button_linkedin"></a>
  <a class="a2a_button_email"></a>
  </div>
  <script async src="https://static.addtoany.com/menu/page.js"></script>
  <!-- AddToAny END -->
  #+END_EXPORT

  #+begin_export html
  <script type="text/javascript">
  $(function() {
    $('#text-table-of-contents > ul li').first().css("display", "none");
    $('#text-table-of-contents > ul li').last().css("display", "none");
    $('#table-of-contents').addClass("visible-lg")
  });
  </script>
  #+end_export
