#+OPTIONS: num:nil toc:t H:4
#+OPTIONS: html-preamble:nil html-postamble:nil html-scripts:t html-style:nil
#+TITLE: Gilded Rose Kata
#+DESCRIPTION: Gilded Rose Kata
#+KEYWORDS: Gilded Rose Kata
#+CREATOR: Enrico Benini
#+HTML_HEAD_EXTRA: <link rel="shortcut icon" href="../../images/favicon.ico" type="image/x-icon">
#+HTML_HEAD_EXTRA: <link rel="icon" href="../../images/favicon.ico" type="image/x-icon">
#+HTML_HEAD_EXTRA:  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.13.0/css/all.min.css">
#+HTML_HEAD_EXTRA:  <link href="https://fonts.googleapis.com/css?family=Montserrat" rel="stylesheet" type="text/css">
#+HTML_HEAD_EXTRA:  <link href="https://fonts.googleapis.com/css?family=Lato" rel="stylesheet" type="text/css">
#+HTML_HEAD_EXTRA:  <link rel="stylesheet" href="../css/main.css">
#+HTML_HEAD_EXTRA:  <link rel="stylesheet" href="../css/blog.css">
#+HTML_HEAD_EXTRA:  <link rel="stylesheet" href="../css/article.css">

* Blog
  :PROPERTIES:
  :HTML_CONTAINER_CLASS: text-center navbar navbar-inverse navbar-fixed-top
  :CUSTOM_ID: navbar
  :END:
  #+BEGIN_EXPORT html
  <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#collapsableNavbar">
    <span class="icon-bar"Article 6</span>
    <span class="icon-bar"></span>
    <span class="icon-bar"></span>
  </button>
  <a title="Home" href="../blog.html"><h1 id="navbarTitle" class="navbar-text">Blog</h1></a>
  <div class="collapse navbar-collapse" id="collapsableNavbar">
    <ul class="nav navbar-nav">
      <li><a title="Home" href="../index.html"><i class="fas fa-home fa-3x" aria-hidden="true"></i></a></li>
      <li><a title="Article List" href="../articleList.html" class="navbar-text h3">Article List</a></li>
  <li><a title="Book List" href="../bookList.html" class="navbar-text h3">Book List</a></li>
  <li><a title="Album List" href="../albumList.html" class="navbar-text h3">Album List</a></li>
    </ul>
  </div>
  #+END_EXPORT

* Gilded Rose Kata
  :PROPERTIES:
  :CUSTOM_ID: Article
  :END:
  *Created: <2020-06-30 Tue>*
** Abstract
   :PROPERTIES:
   :CUSTOM_ID: ArticleAbstract
   :END:

   Not some time ago I watched the mighty [[https://twitter.com/NicolasRinaudo][Nicolas Rinaudo]] dealing with
   the [[https://github.com/emilybache/GildedRose-Refactoring-Kata][Gilded Rose Kata]] on the [[https://www.twitch.tv/scalalove][scalalove's twitch channel]] and that
   inspired me into trying it out using my favorite languages: Scala &
   Haskell.

   I'll structure the article in this way:
   1. I want to get familiar with the actual code-base, analyze it and
      explain what are the (main) flaws I can see. This section will be
      language-independent, since the same algorithm will be
      implemented in the same way, no matter the language, by kata's
      definition. It's a refactoring kata after all.
   2. Following the previous point, I will write down the approach I'll
      use. This should be language-independent as well
   3. Then, It's time to point out the difficulties I found into doing
      it with Scala and Haskell, the pros and cons. I could try also to
      do a comparison between the two.

** Content
   :PROPERTIES:
   :CUSTOM_ID: ArticleContent
   :END:

*** Codebase State
    :PROPERTIES:
    :CUSTOM_ID: CodebaseStateContent
    :END:

    In order to write this section, I just need to access the [[https://github.com/emilybache/GildedRose-Refactoring-Kata][Github kata
    repo]] and do the most boring thing I usually do, after meetings: a
    code review.

    *Disclaimer:* this code is intentionally bad. If you will ever
    encounter a code-base like this one in your life, listen to me...

    #+html: <iframe src="https://giphy.com/embed/A6PcmRqkyMOBy" width="480" height="224" frameBorder="0" class="giphy-embed" allowFullScreen></iframe>

    let's start...

    First thing first, I see there are no tests for the
    application. That needs to be fixed ASAP. We will talk about that in
    the [[#SolutionApproachTestsContent][specific section]].

    Then I see an attempt of a /[[https://en.wikipedia.org/wiki/Domain_model][Domain Model]]/. That's actually a good
    practice: design your types first and be as picky as possible in
    order to [[https://fsharpforfunandprofit.com/posts/designing-with-types-making-illegal-states-unrepresentable/][make the illegal states unrepresentable]]. The problems here
    are
    + The ~var~ keyword, that means mutability. As an FP enthusiast, I
      know mutable state can be hard to manage and lead to unintended
      behaviors. I just notice how it's a problem with the Scala solution
      only! Mutation is possible in Haskell too, but luckily we got
      spared.
    + Just Items!! There are two possible cases: the problem is
      extremely simple or we are missing some types here.
    + No validations. I expect to see some data validation to ensure the
      values we are going to compute remains valid throughout the program
      execution.

    Finally, it comes to the main algorithm and It has several problems as expected:
    1. There's only one giant function. Ok, that in the end the CPU will
       execute 1 operation at a time(mono-core, single-thread), but code
       needs to be human-readable. /Any fool can write code that a computer can understand. Good programmers write code that humans can understand./ (Martin Fowler)
       Plus it violates the [[https://en.wikipedia.org/wiki/Single-responsibility_principle][Single Responsibility Principle]].
    2. Mutation again! Apart from the items fields, that was expected,
       also into the index variable ~i~. Luckily, it is just used to
       select the current element to evaluate, it could be way worse,
       like a different algorithm for odd and even elements, checks on
       the index, and so on.
    3. There should be Types and a compiler somewhere, but I don't see
       any usage of those in here. The code is nearly indistinguishable
       from Javascript.
    4. Nested Ifs statements.

*** Solution Approach
    :PROPERTIES:
    :CUSTOM_ID: SolutionApproachContent
    :END:

    Following up on the previous analysis, we can come up with a plan and
    here I'll prioritize the tasks we need to do in order to make
    this code better and solve the kata.

**** Tests
     :PROPERTIES:
     :CUSTOM_ID: SolutionApproachTestsContent
     :END:

     The first task needed is a good test suite. With proper testing we
     will be sure that the changes we are going to make are
     correct. After all, the definition of /[[https://en.wikipedia.org/wiki/Code_refactoring][Code Refactoring]]/ is to *NOT*
     change the program behavior.

     Now, the test suite can be crafted using multiple techniques and it's a
     huge topic by itself. In this case, testing is not the main focus of
     the kata but still key. Fortunately, it's a simple, little, local
     program. So we should be fine with just /[[https://en.wikipedia.org/wiki/Unit_testing][Unit Testing]]/ and /[[https://en.wikipedia.org/wiki/System_testing][System Testing]]/.

     Usually, testing is done by providing some specific input data to
     the program, fetch the result of the computation, and then compare
     it with what is expected. That's completely fine and it's what the
     majority of the companies do nowadays. The downside of this approach
     is it's static: let say your program has a bug, or crash, for a
     corner case you didn't thought about, testing by example will not
     help you there.

     A different approach I like more is [[https://en.wikipedia.org/wiki/Property_testing][Property Testing]], where the
     input data is *generated*. The software engineer defines the rules
     used by the supporting library/framework to generate the inputs and
     then the expected behavior as a property. I won't go deeper into it,
     but the typical example is the associativity of the sum
     operation. Definitely, the most complicated part is to identify the
     properties of your program, but in my honest opinion, I still see
     benefits into just take advantage of the generated inputs. For
     instance, you will write your test once and it will run multiple
     times with several inputs. It's straight away a big plus.

     Another downside of this approach is the computational cost:
     generating inputs and having multiple runs will increase the testing time.

     **Edit:** Since we have even the specs of the program the
     property base testing fits super nicely: convert phrases like

     /‚ÄúSulfuras‚Äù, being a legendary item, never has to be sold or
     decreases in Quality/

     becomes quite a natural process.

**** Split the Monster
     :PROPERTIES:
     :CUSTOM_ID: SolutionApproachSplitMonsterContent
     :END:

     Once we have the testing set up properly, we can start to break
     stuff using the üî®.

     The Most annoying thing in the codebase is the giant
     stand-alone function. I will tackle this by splitting that
     function into two or more sub-functions. Then, repeat the same
     approach for the outcoming functions. This recursive process
     will terminate when the functions I end up with have a small
     number of lines of code and one single mutation in it, simple as
     that.

     A little but key detail in all of this is that each function will
     return a value and the parent function will be a composition of
     its child.

     This works well when you have 2 consecutive if-statements or an
     if-else-statement:

#+BEGIN_SRC scala
// Before
if (condition1) {
  if (condition3) {
   // Stuff
  } else // Stuff
}
if (condition2) {
// Stuff
} else // Stuff

// After
def f1(params): StuffType = if (condition1) { f3(params) } else // Previous state (identity)
def f2(params): StuffType = if (condition2) {/* Stuff */ } else // Stuff
def f3(params): StuffType = if (condition3) {/* Stuff */ } else // Stuff
val r1 = f1(args)
val r2 = f2(args) // This might probably require r1 as input
r2
#+END_SRC

     This might seems controversial and more complicated, but it helps
     in to put the computations in context. This way, you don't need to
     go and look into the content of the functions, you can just skip
     their implementation details and get an overall feeling of the
     data-flow. Plus, you could not realize it yet, but doing so we
     also put types back into play!

     You might also notice I added an else to the first if, that's
     because I want the wrapping function to actually return a type
     and, since there wasn't an else, in that case, the result will be
     the previous input. When the else branch is chosen the ~f1~
     function will behave as the [[https://en.wikipedia.org/wiki/Identity_function][Identity Function]].

     In the very end, I want also to grab your attention on the way
     this approach penetrates the nested ifs and allow us to collapse the
     structure. Of course, we could also merge ~condition1~ and
     ~condition3~, and we might actually decide to do that in a later
     stage, but let us suppose we will discover that the same logic of
     ~f3~ is reused. This way we can just call ~f3~ since it's independent.

     *Edit:* a very important aspect when comes to refactoring is KNOW
     WHEN TO COMMIT. In my opinion the right time is when all of the
     following conditions holds:
     1. Your tests are green
     2. You are not in the middle of a change (you know what to do
        next)
     3. You are on stand-by, thinking about the next move (related to
        point 2)

     Doing like that will ensure that you commit quite often and you
     can roll back to a /safe-state/ without loosing too much
     time. Otherwise, you might don't want to roll back because your
     last commit was 2h ago.

**** Dealing With Mutation once and for All
     :PROPERTIES:
     :CUSTOM_ID: SolutionApproachMutationContent
     :END:

     Everything is in its own box that returns a new version of the
     input üíú, However... it still mutates and internal field!! But
     because we are in this situation we can easily remove that
     mutation and from the model itself and return a new copy of the
     input with the requested changes.

     **Edit:** Reading the specification I'm not allow to touch the
       Item class unfortunately. Then, this step will remain
       theoretic, for Scala at least.
**** Refinement & New feature
     :PROPERTIES:
     :CUSTOM_ID: SolutionApproachRefinementNewFeatureContent
     :END:


     Finally, with this new working codebase, we should be able to see
     patterns clearly and apply further optimizations. In particular,
     regarding:
     * Merging condition together
     * Adding fields validation or other helpful functions,
     * Adding new types.
     * Structuring the code: moving the functions to the model companion
       objects, in case of Scala, or to a separate module.

     Once the code is finally in a good shape, we can:
     1. See some pattern emerge clearly and properly design the rest
        of the code to expose them: moving the logic to proper new
        types that communicate the intention of the code.
     2. easily add the new feature. It should be quite simple, since
        the new item to evaluate, require a logic that is already shared
        with another item.

     Now that we have a plan, let's start the fun part...let's
     executed it!

     **Edit:** Sometimes you need to do some refinements listed in
     here even in earlier stages because doing it earlier helps you
     very much then postpone the change. Anyway, my suggestion is to
     refine as less as possible in the beginning, only when it's necessary.

*** Scala Kata
    :PROPERTIES:
    :CUSTOM_ID: ScalaContent
    :END:

    <2020-07-02 Thu>: Started the scala exercise from testing and
    [[https://www.scalacheck.org/][scalacheck]]. Get stucked on some test corner case, but with some
    ~println~ I figured it out. [[https://github.com/benkio/GeneralExercises/commit/8e066e5cc678518f6f10147f7280969dce245be2][commit]]

    <2020-07-03 Fri>: Finished the scala tests. Fixed some errors in
    the making. Now we can move to the actual code. [[https://github.com/benkio/GeneralExercises/commit/19c8b9e][commit]]

    <2020-07-04 Sat>: splitted the monster. now I have several
    functions, returning Items containing only one if statement as
    body. No more if indentation anywhere. Plus:
    + Introduced new types wrapper and aliases for the fields
    + Defer/remove mutation as much as possible. Only at the end of
      the foreach.
    + Extracted main operation on types to companion objects.
    + Merged the functions into one calling only basic operations
    [[https://github.com/benkio/GeneralExercises/commit/9fdc7be][commit]]

    <2020-07-05 Sun>: Since the specs just tell us to not touch the
    ~Item~ class, I can change the return type of the ~updateQuality~
    to be the new value. In this way we avoid mutation of the item
    array. After that we can see the pattern composed by: a pre-quality calculation, an increase in sellIn value, a final
    adjustment. Then, we can create subtypes of the item class and put
    the specific logic into each class. This way we can get rid of the
    big remaining functions. Afterwards, we can add the new class for
    the new item easily. Work done!

*** Haskell Kata
    :PROPERTIES:
    :CUSTOM_ID: HaskellContent
    :END:

** Conclusions
   :PROPERTIES:
   :CUSTOM_ID: ArticleConclusions
   :END:

*** Main Challenges
    :PROPERTIES:
    :CUSTOM_ID: MainChallengesConclusion
    :END:


*** Languages Comparison
    :PROPERTIES:
    :CUSTOM_ID: LaguagesComparisonConclusions
    :END:

    # Haskell codebase started a little better, no mutantion into the
    # domain model

* Share Buttons
  :PROPERTIES:
  :CUSTOM_ID: ShareButtons
  :END:
  #+BEGIN_EXPORT html
  <!-- AddToAny BEGIN -->
  <hr>
  <div class="a2a_kit a2a_kit_size_32 a2a_default_style">
  <a class="a2a_dd" href="https://www.addtoany.com/share"></a>
  <a class="a2a_button_facebook"></a>
  <a class="a2a_button_twitter"></a>
  <a class="a2a_button_whatsapp"></a>
  <a class="a2a_button_telegram"></a>
  <a class="a2a_button_linkedin"></a>
  <a class="a2a_button_email"></a>
  </div>
  <script async src="https://static.addtoany.com/menu/page.js"></script>
  <!-- AddToAny END -->
  #+END_EXPORT

  #+begin_export html
  <script type="text/javascript">
  $(function() {
    $('#text-table-of-contents > ul li').first().css("display", "none");
    $('#text-table-of-contents > ul li').last().css("display", "none");
    $('#table-of-contents').addClass("visible-lg")
  });
  </script>
  #+end_export
