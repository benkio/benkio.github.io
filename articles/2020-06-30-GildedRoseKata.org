#+OPTIONS: num:nil toc:t H:4
#+OPTIONS: html-preamble:nil html-postamble:nil html-scripts:t html-style:nil
#+TITLE: Gilded Rose Kata
#+DESCRIPTION: Gilded Rose Kata
#+KEYWORDS: Gilded Rose Kata
#+CREATOR: Enrico Benini
#+HTML_HEAD_EXTRA: <link rel="shortcut icon" href="../../images/favicon.ico" type="image/x-icon">
#+HTML_HEAD_EXTRA: <link rel="icon" href="../../images/favicon.ico" type="image/x-icon">
#+HTML_HEAD_EXTRA:  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.13.0/css/all.min.css">
#+HTML_HEAD_EXTRA:  <link href="https://fonts.googleapis.com/css?family=Montserrat" rel="stylesheet" type="text/css">
#+HTML_HEAD_EXTRA:  <link href="https://fonts.googleapis.com/css?family=Lato" rel="stylesheet" type="text/css">
#+HTML_HEAD_EXTRA:  <link rel="stylesheet" href="../css/main.css">
#+HTML_HEAD_EXTRA:  <link rel="stylesheet" href="../css/blog.css">
#+HTML_HEAD_EXTRA:  <link rel="stylesheet" href="../css/article.css">

* Blog
  :PROPERTIES:
  :HTML_CONTAINER_CLASS: text-center navbar navbar-inverse navbar-fixed-top
  :CUSTOM_ID: navbar
  :END:
#+BEGIN_EXPORT html
<button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#collapsableNavbar">
  <span class="icon-bar"Article 6</span>
  <span class="icon-bar"></span>
  <span class="icon-bar"></span>
</button>
<a title="Home" href="../blog.html"><h1 id="navbarTitle" class="navbar-text">Blog</h1></a>
<div class="collapse navbar-collapse" id="collapsableNavbar">
  <ul class="nav navbar-nav">
    <li><a title="Home" href="../index.html"><i class="fas fa-home fa-3x" aria-hidden="true"></i></a></li>
    <li><a title="Article List" href="../articleList.html" class="navbar-text h3">Article List</a></li>
<li><a title="Book List" href="../bookList.html" class="navbar-text h3">Book List</a></li>
<li><a title="Album List" href="../albumList.html" class="navbar-text h3">Album List</a></li>
  </ul>
</div>
#+END_EXPORT

* Gilded Rose Kata
  :PROPERTIES:
  :CUSTOM_ID: Article
  :END:
  *Created: <2020-06-30 Tue>*
** Abstract
  :PROPERTIES:
  :CUSTOM_ID: ArticleAbstract
  :END:

  Not some time ago I watched the mighty [[https://twitter.com/NicolasRinaudo][Nicolas Rinaudo]] dealing with
  the [[https://github.com/emilybache/GildedRose-Refactoring-Kata][Gilded Rose Kata]] on the [[https://www.twitch.tv/scalalove][scalalove's twitch channel]] and that
  inspired me into trying it out using my favorite languages: Scala &
  Haskell.

  I'll structure the article in this way:
  1. I want to get familiar with the actual code-base, analyze it and
     explain what are the (main) flaws I can see. This section will be
     language-independent, since the same algorithm will be
     implemented in the same way, no matter the language, by kata's
     definition. It's a refactoring kata after all.
  2. Following the previous point, I will write down the approach I'll
     use. This should be language-independent as well
  3. Then, It's time to point out the difficulties I found into doing
     it with Scala and Haskell, the pros and cons. I could try also to
     do a comparison between the two.

** Content
  :PROPERTIES:
  :CUSTOM_ID: ArticleContent
  :END:

*** Codebase State
  :PROPERTIES:
  :CUSTOM_ID: CodebaseStateContent
  :END:

  In order to write this section I just need to access the [[https://github.com/emilybache/GildedRose-Refactoring-Kata][Github kata
  repo]] and do the most boring thing I usually do, after meetings: a
  code review.

  *Disclaimer:* this code is intentionally bad. If you will ever
  encounter a code-base like this one in your life, listen to me...

  #+html: <iframe src="https://giphy.com/embed/A6PcmRqkyMOBy" width="480" height="224" frameBorder="0" class="giphy-embed" allowFullScreen></iframe>

  let's start...

  First thing first, I see there are no tests for the
  application. That need to be fixed ASAP. We will talk about that in
  the [[#SolutionApproachTestsContent][specific section]].

  Then I see an attempt of a /[[https://en.wikipedia.org/wiki/Domain_model][Domain Model]]/. That's actually a good
  practice: design your types first and be as picky as possible in
  order to [[https://fsharpforfunandprofit.com/posts/designing-with-types-making-illegal-states-unrepresentable/][make the illegal states unrepresentable]]. The problems here
  are
  + The ~var~ keyword, that means mutability. As an FP enthusiast, I
    know mutable state can be hard to manage and lead to unintended
    behaviors. I just notice how it's a problem of the Scala solution
    only! Mutation is possible in Haskell too, but luckily we got
    spared.
  + Just Items!! There are two possible cases: the problem is
    extremely simple or we are missing some types in here.
  + No validations. I expect to see some data validation to ensure the
    values we are going to compute remains valid throughout the program
    execution.

  Finally it comes the main algorithm and It has several problems as expected:
  1. There's only one giant function. Ok, that in the end the CPU will
     execute 1 operation at a time(mono-core, single-thread), but code
     needs to be human-readable. /Any fool can write code that a computer can understand. Good programmers write code that humans can understand./ (Martin Fowler)
     Plus it violates the [[https://en.wikipedia.org/wiki/Single-responsibility_principle][Single Responsibility Principle]].
  2. Mutation again! Apart from the items fields, that was expected,
     also into the index variable ~i~. Luckily, it is just used to
     select the current element to evaluate, it could be way worse,
     like a different algorithm for odd and even elements, checks on
     the index and so on.
  3. There should be Types and a compiler somewhere, but I don't see
     any usage of those in here. The code is nearly indistinguishable
     from Javascript.
  4. Nested Ifs statements.

*** Solution Approach
  :PROPERTIES:
  :CUSTOM_ID: SolutionApproachContent
  :END:

**** Tests
  :PROPERTIES:
  :CUSTOM_ID: SolutionApproachTestsContent
  :END:

*** Scala Kata
    :PROPERTIES:
    :CUSTOM_ID: ScalaContent
    :END:

*** Haskell Kata
  :PROPERTIES:
  :CUSTOM_ID: HaskellContent
  :END:

** Conclusions
  :PROPERTIES:
  :CUSTOM_ID: ArticleConclusions
  :END:

*** Main Challenges
  :PROPERTIES:
  :CUSTOM_ID: MainChallengesConclusion
  :END:


*** Languages Comparison
  :PROPERTIES:
  :CUSTOM_ID: LaguagesComparisonConclusions
  :END:

  # Haskell codebase started a little better, no mutantion into the
  # domain model

* Share Buttons
  :PROPERTIES:
  :CUSTOM_ID: ShareButtons
  :END:
#+BEGIN_EXPORT html
<!-- AddToAny BEGIN -->
<hr>
<div class="a2a_kit a2a_kit_size_32 a2a_default_style">
<a class="a2a_dd" href="https://www.addtoany.com/share"></a>
<a class="a2a_button_facebook"></a>
<a class="a2a_button_twitter"></a>
<a class="a2a_button_whatsapp"></a>
<a class="a2a_button_telegram"></a>
<a class="a2a_button_linkedin"></a>
<a class="a2a_button_email"></a>
</div>
<script async src="https://static.addtoany.com/menu/page.js"></script>
<!-- AddToAny END -->
#+END_EXPORT

#+begin_export html
<script type="text/javascript">
$(function() {
  $('#text-table-of-contents > ul li').first().css("display", "none");
  $('#text-table-of-contents > ul li').last().css("display", "none");
  $('#table-of-contents').addClass("visible-lg")
});
</script>
#+end_export
