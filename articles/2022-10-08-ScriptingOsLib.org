#+OPTIONS: num:nil toc:t H:4
#+OPTIONS: html-preamble:nil html-postamble:nil html-scripts:t html-style:nil
#+TITLE: Scripting with Scala CLI & Os-lib
#+DESCRIPTION: Scripting with Scala CLI & Os-lib
#+KEYWORDS: Scripting with Scala CLI & Os-lib
#+CREATOR: Enrico Benini
#+HTML_HEAD_EXTRA: <link rel="shortcut icon" href="../../images/favicon.ico" type="image/x-icon">
#+HTML_HEAD_EXTRA: <link rel="icon" href="../../images/favicon.ico" type="image/x-icon">
#+HTML_HEAD_EXTRA:  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.13.0/css/all.min.css">
#+HTML_HEAD_EXTRA:  <link href="https://fonts.googleapis.com/css?family=Montserrat" rel="stylesheet" type="text/css">
#+HTML_HEAD_EXTRA:  <link href="https://fonts.googleapis.com/css?family=Lato" rel="stylesheet" type="text/css">
#+HTML_HEAD_EXTRA:  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
#+HTML_HEAD_EXTRA:  <link rel="stylesheet" href="../css/main.css">
#+HTML_HEAD_EXTRA:  <link rel="stylesheet" href="../css/blog.css">
#+HTML_HEAD_EXTRA:  <link rel="stylesheet" href="../css/article.css">

* Blog
:PROPERTIES:
:HTML_CONTAINER_CLASS: text-center navbar navbar-inverse navbar-fixed-top
:CUSTOM_ID: navbar
:END:
#+INCLUDE: "../Fragments/BlogNavbarFragment.html" export html

* Scripting with Scala CLI & Os-lib
:PROPERTIES:
:CUSTOM_ID: Article
:END:
*Created: <2022-10-08 Sat>*
** Abstract
:PROPERTIES:
:CUSTOM_ID: ArticleAbstract
:END:

In this article I will show how I refactored some existing scripts
written in [[https://scala-cli.virtuslab.org/][scala-cli]] using the [[https://github.com/com-lihaoyi/os-lib][os-lib]].

** Use Cases & Motivations
:PROPERTIES:
:CUSTOM_ID: ArticleContent
:END:

Everyone has his own scripts for various tasks and I'm no exception.
At the time of writing I have 2:
  - One for converting movies to a format compatible with my mom's
    TV. Movies needs to be in Xvid, 720p, a specific bit rate, mp3
    audio track, and be not bigger then 1GB (if so it must be
    splitted). I discovered this by trial and error.
  - One for generating GIF (muted video chunks with subtitles, to be
    precise) staring from YouTube links.

    For these task I rely on [[https://scala-cli.virtuslab.org/][scala-cli]], ~ffmpeg~, ~yt-dlp~ and classic
    Unix commands such as ~rm~ and ~mv~.

    Everything works as expected and anyone with a little trace of
    intelligence would keep the situation as it is. At least until
    something goes wrong. However, being a Scala engineer, I heard about
    "the lihaoyi ecosystem" several times and I've never had a chance
    to play with it. Plus, the above scripts use the [[https://www.scala-lang.org/api/2.13.x/scala/sys/process/index.html][sys.process._]]
    package and I'm not really super fan of it. So I thought: "why
    just I don't refactor the scripts using the [[https://github.com/com-lihaoyi/os-lib][os-lib]]?". This way I can
    both the goals of getting rid of the [[https://www.scala-lang.org/api/2.13.x/scala/sys/process/index.html][sys.process._]] and try something
    from lihaoyi.

    Moreover, apart from the library [[https://github.com/com-lihaoyi/os-lib#cookbook][README Cookbook]] and [[https://www.lihaoyi.com/post/HowtoworkwithFilesinScala.html][this article]]
    from Li Haoyi himself, check them out if you want to explore the
    library, I couldn't find a lot of examples of its usages,
    especially in a "real" situation. The library is a porting of
    [[https://docs.python.org/3/library/os.html][Python's Os library]] and there are examples of it around for sure,
    but no one wants to have to translate from a language to another
    when he is looking for examples.

** Insert Script Dependency

  The first thing you want to do is to add the [[https://github.com/com-lihaoyi/os-lib][os-lib]] to your
[[https://scala-cli.virtuslab.org/][  scala-cli]]. At the moment of writing the latest version is ~0.8.1~.
  Just add this snippet at the very top of your script

  #+begin_src scala
    #!/usr/bin/env scala-cli
    using lib "com.lihaoyi::os-lib:0.8.1"
  #+end_src

** Movie Convertion Script

*** File Paths

  Let's convert simple file path strings to the ones used by the
  library. Note how I had to specify a temporary existing directory
  for the script to work and store intermediate results. Meanwhile the
  [[https://github.com/com-lihaoyi/os-lib/][os-lib]] provides a [[https://github.com/com-lihaoyi/os-lib#ostempdir][temp dir]] operation to get it.

  I can then change the other paths as well to start straight away
  from the ~home directory~. This will make it more flexible since I
  can easily move the script without having to update the paths.

  #+begin_src scala
    // Before
    val tempPath = "/Users/benkio/temp"
    val startingPath = "/Users/benkio/temp/test"
    val destinationPath = "/Users/benkio/temp/convertedFilms"

    // After

    val tempPath = os.temp.dir()
    val startingPath = os.home/"temp"/"test"
    val destinationPath = os.home/"temp"/"convertedFilms"
  #+end_src

  Note: on the [[https://github.com/com-lihaoyi/os-lib#ospath][README os.Path section]] you could find that you can
  create a path using just the ~'~ prefix. However, if you try you
  might get this error:

  #+begin_example
  [error] ./convertFilms.sc:18:31: symbol literal 'temp is no longer supported,
  [error] use a string literal "temp" or an application Symbol("temp") instead,
  [error] or enclose in braces '{temp} if you want a quoted expression.
  [error] For now, you can also `import language.deprecated.symbolLiterals` to accept
  [error] the idiom, but this possibility might no longer be available in the future.
  [error] val destinationPath = os.home/'temp/'convertedFilms
  #+end_example

  That's why I ended up using simple strings.

*** List Files

  Right now, there is this function in the script:

  #+begin_src scala
  def getListOfFiles(dir: File, prefix: String): List[File] = {
  dir.listFiles.filter(_.isFile).toList.filter { file =>
      file.getName.startsWith(prefix)
    }
  }
  #+end_src

  Starting from a folder, This will just return a list of files with a
  given prefix. Please close an eye on the double ~filter~ call.

  I can now simply replace this using ~os.list~ and then filter the
  results with the same ~filter~ used above.

  #+begin_src scala
    os.list(tempPath).filter(p => os.isFile(p) && p.last.startsWith(inputFilename))
  #+end_src
  I want to underline this error message I got, really really nice!

  #+begin_example
    value IsFile is not a member of os - did you mean os.isFile?
  #+end_example

*** Move Files

  We can then move the files listed and filtered in the previous
  section with just a simple ~foreach~ and the help of the
  ~os.move.into~.

  Beware the semantic differences between the move operations since
  they could remove everything from the destination before performing
  the operation, eg ~os.move.over~, or just fail if the destination
  does not exsists, eg ~os.move~

  The result becomes:

  #+begin_src scala
    // Before
    def moveCommand(inputFilename: String):Unit = {
      val filesToMove = getListOfFiles(new File(tempPath), inputFilename)
      filesToMove.foreach { file =>
        val moveCmd = s"""mv $tempPath/${file.getName} "$destinationPath/""""
        moveCmd !
      }
    }

    // After

    def moveCommand(inputFilename: String): Unit =
      os.list(tempPath)
        .filter(p => os.isFile(p) && p.last.startsWith(inputFilename))
        .foreach(f => os.move.into(f, destinationPath))
  #+end_src


** Conclusions
  :PROPERTIES:
  :CUSTOM_ID: ArticleConclusions
  :END:

* Share Buttons
  :PROPERTIES:
  :CUSTOM_ID: ShareButtons
  :END:
#+BEGIN_EXPORT html
<!-- AddToAny BEGIN -->
<hr>
<div class="a2a_kit a2a_kit_size_32 a2a_default_style">
<a class="a2a_dd" href="https://www.addtoany.com/share"></a>
<a class="a2a_button_facebook"></a>
<a class="a2a_button_twitter"></a>
<a class="a2a_button_whatsapp"></a>
<a class="a2a_button_telegram"></a>
<a class="a2a_button_linkedin"></a>
<a class="a2a_button_email"></a>
</div>
<script async src="https://static.addtoany.com/menu/page.js"></script>
<!-- AddToAny END -->
#+END_EXPORT

#+begin_export html
<script type="text/javascript">
$(function() {
  $('#text-table-of-contents > ul li').first().css("display", "none");
  $('#text-table-of-contents > ul li').last().css("display", "none");
  $('#table-of-contents').addClass("visible-lg")
});
</script>
#+end_export
