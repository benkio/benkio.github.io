#+OPTIONS: num:nil toc:t
#+OPTIONS: html-preamble:nil html-postamble:nil html-scripts:t html-style:nil
#+TITLE: BLOG
#+DESCRIPTION: Blog
#+KEYWORDS: Blog
#+CREATOR: Enrico Benini
#+HTML_HEAD_EXTRA: <link rel="shortcut icon" href="../../images/favicon.ico" type="image/x-icon">
#+HTML_HEAD_EXTRA: <link rel="icon" href="../../images/favicon.ico" type="image/x-icon">
#+HTML_HEAD_EXTRA:  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.13.0/css/all.min.css">
#+HTML_HEAD_EXTRA:  <link href="https://fonts.googleapis.com/css?family=Montserrat" rel="stylesheet" type="text/css">
#+HTML_HEAD_EXTRA:  <link href="https://fonts.googleapis.com/css?family=Lato" rel="stylesheet" type="text/css">
#+HTML_HEAD_EXTRA:  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
#+HTML_HEAD_EXTRA:  <link rel="stylesheet" href="../css/main.css">
#+HTML_HEAD_EXTRA:  <link rel="stylesheet" href="../css/blog.css">
#+HTML_HEAD_EXTRA:  <link rel="stylesheet" href="../css/article.css">

* Blog
  :PROPERTIES:
  :HTML_CONTAINER_CLASS: text-center navbar navbar-inverse navbar-fixed-top
  :CUSTOM_ID: navbar
  :END:
#+BEGIN_EXPORT html
<button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#collapsableNavbar">
  <span class="icon-bar"Article 6</span>
  <span class="icon-bar"></span>
  <span class="icon-bar"></span>
</button>
<a title="Home" href="../blog.html"><h1 id="navbarTitle" class="navbar-text">Blog</h1></a>
<div class="collapse navbar-collapse" id="collapsableNavbar">
  <ul class="nav navbar-nav">
    <li><a title="Home" href="../index.html"><i class="fas fa-home fa-3x" aria-hidden="true"></i></a></li>
    <li><a title="Article List" href="../articleList.html" class="navbar-text h3">Article List</a></li>
  </ul>
</div>
#+END_EXPORT

* Static Personal Website with Org Mode
  :PROPERTIES:
  :CUSTOM_ID: Article
  :END:
  *Created: <2020-06-11 Thu>*
** Abstract
  :PROPERTIES:
  :CUSTOM_ID: ArticleAbstract
  :END:
  In this article I will show you how I built this site using:
  + Org-mode
  + Bootstrap ([[https://github.com/marsmining/ox-twbs][ox-twbs]])
  + HTML(autogenerated) + CSS(minimal) + Javascript ([[https://learn.jquery.com/][JQuery]])

  You can find the source code of this madness in [[https://github.com/benkio/benkio.github.io][here]].

  As you can see it is hosted into Github pages, therefore it's a
  static webpage. However, we can get some backend
  features using Org and Elisp. Of course, it's anything like a
  project who has a real backend available, and some times we would
  need to do some proper hacks.

  Keep reading to discover the pitfalls and advantages of this approach.

** Content
  :PROPERTIES:
  :CUSTOM_ID: ArticleContent
  :END:

  In this section, I will run you through the main features of the site, inserting
  links to the code where necessary.

*** Features
**** Autogenerated HTML and Org-mode typing comfort

     One of the biggest advantages of choosing org-mode as a
     technology is that you will get access to the comfort of writing
     a blog using a markdown language. Then, it looks clean and comes
     with a lot of features (integrated into Emacs):
     + It's easy to manipulate: tables, dates, links
     + Organize your text in sections
     + Create lists like this one and so on

     Basically you can do what you could do in a ~.md~ file and
     more.

     That's great!!! But what do you want at the end of the day is the
     well-known trinity: HTML, CSS, JS. So, we need a way to generate
     at least HTML from that. Luckily, org-mode comes with a native
     export system to HTML, with its own CSS too! However, the outcome
     is far from being /modern/.

     How to make things better? For sure I don't want to mess up with
     the CSS: I'm not a frontend dev, plus I learned a long time ago the
     pain of web designing. The only other option is to *steal it*!
     Fortunately, I have a go-to option: _Bootstrap_.

     Anyway, Bootstrap comes with its own set of rules and structure.
     Aligning the native autogenerated HTML code to that is still
     very hard, but apparently someone else had my same idea and he
     created an org extension that generates a Bootstrap-friendly HTML
     output. This extension is called [[https://github.com/marsmining/ox-twbs][ox-twbs]] and it provides a
     command (~org-twbs-export-to-html~) to compile the org to HTML.

     In this way I'm writing Org text right now and what you see it's
     the final result. I got the responsiveness and all the styling
     (almost) for free, icons included (+ [[https://fontawesome.com/][fontawesome]] for the homepage).

**** Article List and Blog Dynamic Content
     # Elisp interaction to generate the html to embed

**** Pagination
     # JQuery integration using the calculated values
*** Pro and Cons
**** Code Conciseness
# Just a link to the first feature should do the trick. Consider
# removing this.
**** Javascript Hacks
**** Inefficiencies and Possible Workarounds
# Reload blog home and article list on Rename, create, delete
# Workaround, add a global site recompilation.

# Recopmilation takes time equal to the number of articles
# Workaround, split the articles into archive (never touched again
# kinda) and on WIP

** Conclusions
  :PROPERTIES:
  :CUSTOM_ID: ArticleConclusions
  :END:

# Comparison with alternatives (is it the code actually concise?)
# Freedom to do what you want
# Nerd satisfaction & Fun

* Share Buttons
  :PROPERTIES:
  :CUSTOM_ID: ShareButtons
  :END:
#+BEGIN_EXPORT html
<!-- AddToAny BEGIN -->
<div class="a2a_kit a2a_kit_size_32 a2a_default_style">
<a class="a2a_dd" href="https://www.addtoany.com/share"></a>
<a class="a2a_button_facebook"></a>
<a class="a2a_button_twitter"></a>
<a class="a2a_button_whatsapp"></a>
<a class="a2a_button_telegram"></a>
<a class="a2a_button_linkedin"></a>
<a class="a2a_button_email"></a>
</div>
<script async src="https://static.addtoany.com/menu/page.js"></script>
<!-- AddToAny END -->
#+END_EXPORT

#+begin_export html
<script type="text/javascript">
$(function() {
  $('#text-table-of-contents > ul li').first().css("display", "none");
  $('#text-table-of-contents > ul li').last().css("display", "none");
});
</script>
#+end_export
