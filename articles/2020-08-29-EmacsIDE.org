#+OPTIONS: num:nil toc:nil H:4
#+OPTIONS: html-preamble:nil html-postamble:nil html-scripts:t html-style:nil
#+TITLE: Emacs IDE - Build your own Metals
#+DESCRIPTION: Emacs IDE - Build your own Metals
#+KEYWORDS: Emacs IDE - Build your own Metals
#+CREATOR: Enrico Benini
#+HTML_HEAD_EXTRA: <link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon">
#+HTML_HEAD_EXTRA: <link rel="icon" href="../images/favicon.ico" type="image/x-icon">
#+HTML_HEAD_EXTRA:  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.13.0/css/all.min.css">
#+HTML_HEAD_EXTRA:  <link href="https://fonts.googleapis.com/css?family=Montserrat" rel="stylesheet" type="text/css">
#+HTML_HEAD_EXTRA:  <link href="https://fonts.googleapis.com/css?family=Lato" rel="stylesheet" type="text/css">
#+HTML_HEAD_EXTRA: <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"/>
#+HTML_HEAD_EXTRA: <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
#+HTML_HEAD_EXTRA:  <link rel="stylesheet" href="../css/main.css">
#+HTML_HEAD_EXTRA:  <link rel="stylesheet" href="../css/blog.css">
#+HTML_HEAD_EXTRA:  <link rel="stylesheet" href="../css/article.css">

* Blog
  :PROPERTIES:
  :HTML_CONTAINER: nav
  :HTML_CONTAINER_CLASS: navbar bg-dark border-bottom border-body navbar-fixed-top navbar-expand-lg bg-body-tertiary
  :CUSTOM_ID: navbar
  :END:
#+CALL: ../templates.org:navbar(1)

* You Don't Need Metals When You Can Build Your Own (Heavy) Metal
  :PROPERTIES:
  :CUSTOM_ID: Article
    :HTML_CONTAINER_CLASS: row
  :END:
  *Created: <2020-08-29 Sat>*
** Abstract
  :PROPERTIES:
  :CUSTOM_ID: ArticleAbstract
  :END:

  Plain emacs is pretty basic, but we all know you can extend it, with
  little effort, to the max.

  This article is about my experience of turning emacs, from a simple
  editor, to something like an IDE. It's still a work in progress as
  always, but it may inspire you into doing the same or pick up some
  ideas from my configuration, extend and make them yours.

  Enjoy ðŸ˜º

** Content
  :PROPERTIES:
  :CUSTOM_ID: ArticleContent
  :END:

  I am one of those nerds who uses Emacs for pretty much
  everything. I'm not living in it, but I'm not too far from it. One
  of the things I love about it is the possibility to configure it
  as much as you like: creating you own features to extend it.

  I work as a software engineer and, when you deal with code, you
  often need a set of features from your editor (IDE) that speed up
  your productivity by a lot. Nowadays, these features are shipped
  throughout classic IDEs, like IntelliJ or Eclipse, or cross-editor
  extensions, like [[https://scalameta.org/metals/][Metals]] in case of Scala, using the [[https://en.wikipedia.org/wiki/Language_Server_Protocol][Language Server
  Protocol (LSP)]]. Of course, emacs support it as well.

  *However*, installing metals in emacs ended up being a real pain in
  the ass:

  + Having a hard time setting up Doom + Scala (Metals) + Gradle +
    monorepo - ~https://www.reddit.com/r/emacs/comments/idsyxi/having_a_hard_time_setting_up_doom_scala_metals/~
  + [[https://twitter.com/NicolasRinaudo/status/1204143009807425536][Metals in VSCode vs Metals in Emacs]]


  I don't know about the status of it right now. Check on twitter if
  you like.

  At that point, I just told to myself: /Benkio, you know how to code, you can learn and use Elisp, you can virtually implement those features for yourself!/
  And here we are.

** Features
  :PROPERTIES:
  :CUSTOM_ID: ArticleContentFeatures
  :END:

  The features I selected for my work-flow are the following:

  + ~shell-clean-old-output~ :: During development I usually start
       continuous compilation, so I have a background shell printing
       out the compiler output at every change of code (file
       saving). It can be the compiler, the linter or a checker, in
       case of dynamic languages. You name it. In this way, when you
       are ready to deal with errors, you just switch to the shell and
       you see them. However, when you switch to the shell after a
       while, buffer carry the old output results, with errors that
       aren't there anymore. Therefore, I need a command to cleanup
       the shell and leave just the last output, the meaningful one.
  + ~goto-next-warn-error~ :: Once you have the current errors you
       wish to jump to them. Fortunately, pretty much every tool
       provides, as error/warning output: file path, line & column
       number. So, with this command, I put the cursor at the
       beginning of the shell output and it moves the cursor to the
       next location of the error/warnings it encounter, parsing the
       output.
  + ~remove-unused-import~ :: Dependency management is a very useful
       feature of any IDE. When happens to have an import that's not
       used you really wish to get rid of it. This command is built on
       the previous one and it goes and remove it for you. I must say
       it's not always super precise (depends on how you instruct it)
       and it might leave empty lines, but nothing a code formatter,
       like [[https://scalameta.org/scalafmt/][scalafmt]] or [[https://github.com/mihaimaruseac/hindent][hindent]], can't deal with.
  + ~import-type-at-point~ :: The other way around can happen. When
       you have something in your code that's not in scope, so you
       need the right import. This command goes in search of an
       existing import for such object and, if none is found, it goes
       for its definition and build it by itself. Then, the import is
       added to your current file automatically.
  + ~extract-code-line-or-region~ :: A key feature for every
       refactoring maniac, the ability to extract pieces of code to a
       new value or method. it just put the result to the first empty
       line it finds backwards, so you can then move it wherever you
       want, and substitute the code you selected with the name of
       that method/value. It might not be super precise as well, but
       it's a start.

  IDEs have definitely a longer list of features, but I added the most
  important for me. A possible improvement would be to add a command
  for unimplemented methods/values, in case you are creating something
  that should satisfy a specific contract, like a trait/interface/typeclass.

  At the time of writing, I've implemented them for: Haskell, Scala and Typescript.

** Abstract the Pattern
  :PROPERTIES:
  :CUSTOM_ID: ArticleContentAbstactPattern
  :END:

  The previous section is my /Letter of Intent/ about what I need and
  I want to do, but the number of languages out there are
  countless. Do I need to implement the same exact features countless
  times (or at least for every language I'm interested in) over and
  over again??

  Answer: *Yes and No* ðŸ˜„

  Every language/tool out there has different syntax, so we need to add
  some specific logic to each one of them. Luckily, there are
  operations that are common whatever the technology, such as copying the
  resulting import to the starting file or copying the extract code to
  the nearest available position. How can we factor out these
  operations and share them between the specific implementations?

  Answer: *Higher-order Functions*

  We can have common patterns/templates for the features that get, as arguments,
  the language-specific functions and apply them accordingly.

*** Example
  :PROPERTIES:
  :CUSTOM_ID: ArticleContentAbstactPatternExample
  :END:

  I will show you how the higher-order function behind
  the feature ~extract-code-line-or-region~ is built.

  #+BEGIN_SRC emacs-lisp
  (defun extract-code-line-or-region-template (value function postDefinitionSyntaxValue postDefinitionSyntaxFunc EndSyntaxValue EndSyntaxFunc name parameters from to)
    "Template for extracting code to value or function:
     Based on the input it this extract the selected code to the closest empty line above.
     - Value: syntax for values in target laguage
     - function: syntax for function in target laguage
     - postDefinitionSyntax: what you put between the name + parameters and the body of the function/value. eg (= in scala)
     - EndSyntax: what to put at the end of the definition of value/function body. Eg in js it's ';' for value but '}' for functionsxs
     - name: name of the extracted value/function
     - from: start of the region
     - to: end of the region
    "
    ;; extract code, cut if region or cut from point to end of the line
    (setq code (buffer-substring from to))
    (delete-region from to)

    ;; Generate code
    (setq resultDefinition (if (string-blank-p parameters)
                               (concat value name postDefinitionSyntaxValue code EndSyntaxValue)
                             (concat function name parameters postDefinitionSyntaxFunc code EndSyntaxFunc)))
    (setq resultReference (if (string-blank-p parameters)
                              name
                            (concat name parameters)))
    ;; Put the resultReference at point
    (insert resultReference)
    ;; Move to the closest ^$ line and insert the resultDefinition
    (re-search-backward "^$")
    (insert resultDefinition)
    )
  #+END_SRC

  The first thing you notice is how this function takes a lot of
  parameters. That's due to his nature of higher order function, since
  it needs to apply the language specific functions in input and
  change its behavior based on the values it gets.

  These are the operations performed:
  - Grabs the code to extract and delete the region selected.
  - Compose the input values to create the extracted code and the
    related reference. It choose if it will be a value of a method
    based on the presence of parameters.
  - Insert the reference where there was the code.
  - Search back for the first empty line.
  - Insert the computed value, method.


    Notice how there's no reference about a specific language syntax
    into this function.

** Language Specific
  :PROPERTIES:
  :CUSTOM_ID: ArticleContentLanguageSpecific
  :END:

  Now that we have templates to use, we can focus on crafting the
  language specific functions to pass into the templates. Most of the
  time, them rely on Regexp to instruct: what to search for or what is
  the right syntax of an import for instance. Of course, some are more
  complex then other and can be quite tricky to set them
  properly. Plus, sometimes you need to override a specific template function
  because the target language is quite /special/.

*** Example
  :PROPERTIES:
  :CUSTOM_ID: ArticleContentLanguageSpecificExample
  :END:

  Still using the ~extract-code-line-or-region-template~ but the
  Haskell version

  #+BEGIN_SRC emacs-lisp
  (defun hs-extract-code-line-or-region (name &optional parameters from to)
    "Extract the code to val or def:
     Require:
       - Name of the val/def
       - Optional list of parameters (if empty it will be a val)

     if no code region is selected then it extracts the rest of the line from current position
     Return type not specified.
    "
    (interactive (list
                  (read-string "value/function name: " )
                  (progn
                    (setq
                     param (read-string "param name (RET to finish): ")
                     params nil
                     )
                    (while (not (equal "" (s-trim param)))
                      (push (s-trim param) params)
                      (setq param (read-string "param name (RET to finish): "))
                      )
                    (concat " " (mapconcat 'identity (reverse params) " "))
                    )
                  (if (use-region-p) (region-beginning) (point))
                  (if (use-region-p) (region-end) (line-end-position))
                  ))
    (funcall 'extract-code-line-or-region-template "" "" " = " " = " "" "" name parameters from to)
    )
  #+END_SRC

  Here, the most part of the function is about fetching the input. In
  particular:
  - The name of the outcome value/method.
  - The list of parameters. See how it loops until the user inserts the
    empty string.
  - The region, if present, Otherwise a new region is taken, starting
    from the current position to the end of the line.


  After all the inputs are set, the function just calls the relative
  template function, passing some constants, where the language-syntax
  specific is required, and the variables, where the values are driven
  by the input.  Here you can see how most of the constants are empty
  strings since Haskell has a very concise syntax compared to other
  languages like Scala or Typescript.

** Conclusions
  :PROPERTIES:
  :CUSTOM_ID: ArticleConclusions
  :END:

  Usually, you write the conclusions at the end of the article, but in
  this case, I already know what to write in here, so I have written
  these sections pretty much at the beginning of the article.

  There's a high chance that [[https://scalameta.org/metals/][Metals]], or something similar, now works
  flawlessly and it's easy to install. So, my recommendation is to use
  it, the less configuration you have in place, the better.

  By the way, this was a very cool exercise to do and it's easy to
  remove because they are just a bunch of (almost) stand-alone
  functions. Plus, right now they aren't perfect, but knowing that you
  could change them and make them work better is reassuring.

  In summary, if you want to really make a difference and improve the
  state of software, don't code for your own configuration, but go and
  contribute to those projects to make them better.

  PS: basically, every conclusion I make at the end of my articles is
  something like. Don't do what you just read!. ðŸ˜„

*** References

    - [[https://github.com/benkio/emacs-config/blob/master/config.org][Emacs configuration]]
    - [[https://github.com/benkio/emacs-config/blob/master/config.org?plain=1#L2099][Template Functions]]
    - [[https://github.com/benkio/emacs-config/blob/master/config.org?plain=1#L2324][Scala Functions]]
    - [[https://github.com/benkio/emacs-config/blob/master/config.org?plain=1#L2519][Haskell Functions]]
    - [[https://github.com/benkio/emacs-config/blob/master/config.org?plain=1#L2735][Typescript Functions]]

* Share Buttons
  :PROPERTIES:
  :CUSTOM_ID: ShareButtons
    :HTML_CONTAINER_CLASS: row
  :END:
#+BEGIN_EXPORT html
<!-- AddToAny BEGIN -->
<hr>
<div class="a2a_kit a2a_kit_size_32 a2a_default_style">
<a class="a2a_dd" href="https://www.addtoany.com/share"></a>
<a class="a2a_button_facebook"></a>
<a class="a2a_button_twitter"></a>
<a class="a2a_button_whatsapp"></a>
<a class="a2a_button_telegram"></a>
<a class="a2a_button_linkedin"></a>
<a class="a2a_button_email"></a>
</div>
<script async src="https://static.addtoany.com/menu/page.js"></script>
<!-- AddToAny END -->
#+END_EXPORT

#+begin_export html
<script type="text/javascript">
$(function() {
  $('#text-table-of-contents > ul li').first().css("display", "none");
  $('#text-table-of-contents > ul li').last().css("display", "none");
  $('#table-of-contents').addClass("visible-lg")
});
  document.getElementById("content").classList.add("container-fluid","p-0");
  document.getElementById("text-navbar").classList.add("container-fluid");
  document.getElementById("outline-container-navbar").setAttribute("data-bs-theme", "dark");
  document.getElementById("text-Article").classList.add("text-center");
  $('.outline-3').addClass("m-auto").addClass("col-md-10");
  document.getElementById("text-ShareButtons").classList.add("m-auto", "col-md-10");
</script>
#+end_export
#+INCLUDE: ../Fragments/disqusFragment.html export html
