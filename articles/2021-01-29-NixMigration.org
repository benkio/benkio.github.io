#+OPTIONS: num:nil toc:t H:4
#+OPTIONS: html-preamble:nil html-postamble:nil html-scripts:t html-style:nil
#+TITLE: Time to Move to Nix
#+DESCRIPTION: Time to Move to Nix
#+KEYWORDS: Time to Move to Nix
#+CREATOR: Enrico Benini
#+HTML_HEAD_EXTRA: <link rel="shortcut icon" href="../../images/favicon.ico" type="image/x-icon">
#+HTML_HEAD_EXTRA: <link rel="icon" href="../../images/favicon.ico" type="image/x-icon">
#+HTML_HEAD_EXTRA:  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.13.0/css/all.min.css">
#+HTML_HEAD_EXTRA:  <link href="https://fonts.googleapis.com/css?family=Montserrat" rel="stylesheet" type="text/css">
#+HTML_HEAD_EXTRA:  <link href="https://fonts.googleapis.com/css?family=Lato" rel="stylesheet" type="text/css">
#+HTML_HEAD_EXTRA:  <link rel="stylesheet" href="../css/main.css">
#+HTML_HEAD_EXTRA:  <link rel="stylesheet" href="../css/blog.css">
#+HTML_HEAD_EXTRA:  <link rel="stylesheet" href="../css/article.css">

* Blog
  :PROPERTIES:
  :HTML_CONTAINER_CLASS: text-center navbar navbar-inverse navbar-fixed-top
  :CUSTOM_ID: navbar
  :END:
#+BEGIN_EXPORT html
<button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#collapsableNavbar">
  <span class="icon-bar"Article 6</span>
  <span class="icon-bar"></span>
  <span class="icon-bar"></span>
</button>
<a title="Home" href="../blog.html"><h1 id="navbarTitle" class="navbar-text">Blog</h1></a>
<div class="collapse navbar-collapse" id="collapsableNavbar">
  <ul class="nav navbar-nav">
    <li><a title="Home" href="../index.html"><i class="fas fa-home fa-3x" aria-hidden="true"></i></a></li>
    <li><a title="Article List" href="../articleList.html" class="navbar-text h3">Article List</a></li>
<li><a title="Book List" href="../bookList.html" class="navbar-text h3">Book List</a></li>
<li><a title="Album List" href="../albumList.html" class="navbar-text h3">Album List</a></li>
  </ul>
</div>
#+END_EXPORT

* Time to Move to Nix
  :PROPERTIES:
  :CUSTOM_ID: Article
  :END:
  *Created: <2021-01-29 Fri>*
** Abstract
  :PROPERTIES:
  :CUSTOM_ID: ArticleAbstract
  :END:

  Since some time I hear about the [[https://nixos.wiki/wiki/Main_Page][Nix package manager]]: how it is
  awesome, how it solves you all the config problems of this world,
  how it will make you hardware agnostic. You can read all the
  benefits of it all over the web. Then, as a software developer, with
  his own config scripts and so on, I dedided that's time to give it a
  go.

  In this article, I will describe the process, from being a complete
  noob: knowing nothing about it apart form the last paragraph, to set
  up a complete configuration that works for me.

  Disclamer: you might have different needs from mine, but still I
  think this could help someone else. So, let's get ready to rumble!!!

** Content
  :PROPERTIES:
  :CUSTOM_ID: ArticleContent
  :END:

*** The Plan

    As a real professional, I must start with a tweet ðŸ˜‰
    #+caption: The Plan Tweet
    [[file:./2021-01-29-NixMigration/The_Plan_Tweet.png]]

    I skip the ~Virtual Box~ & ~Ubuntu Minimal~ installation. I choose
    Ubuntu minimal as a base since I want to really start from scratch
    and try to setup also the window manager.

    Another question I want to answer straight away is: Why don't I
    just start using NixOs instead? Honestly, I don't have a strong
    reason, I can say I want to start as minimal as possible and from a
    thing I know. Plus, it should be quicker to set up a minimal
    virtual machine rather then one with Nix OS.

*** First Impact

    The only word I can think of is: *overwhelming*, but not in a good
    way. It has so much stuff that you, newcomer, will feel confused
    and disoriented. You might thing Â«Oh, let's read the manual/guide
    from the official siteÂ», well in there there's everything: the nix
    language, the nixos, the different commands, multiuser setup,
    profiles and much much more. The only thing I found useful was
    how to install nix and that's it.

    What I'm searching is how to setup my own configuration, then,
    when the need arise, I will go and search how to create a Set or a
    funciton with the Nix language. Instead, a lot of the guides
    doesn't start from a simple plain config with, let's say, just
    ~wget~ and ~7zip~.

    So I kept reading and reading, landing finally on Reddit. They
    suggest to take an exsisting configuration and start by modifying
    that.

**** NixOs and Home Manager

     In the end, I discovered that, with ~Nix~ only, you can't
     actually manage the whole system. In particular, I wasn't able to
     find a guide telling you how to set up a proper script like you
     would to with bash. Plus, if you want to change some config apart
     from just installing/uninstalling software, you need
     ~NixOs~. That could be installed by using the [[https://github.com/jeaye/nixos-in-place][nix-in-place
     script]], but, what it does is to create an _alternative_ root
     folder as you will just restart in NixOs and moves everything you
     have to an ~old-root~ folder. I don't think you want that, unless
     you just do it from the start (and still I find it not very cool,
     let's say okish).

     After some more reearch, I found the [[https://github.com/nix-community/home-manager][Home Manager Package]]. This
     will extend the capabilities of ~Nix~ by far and let you manage
     your home directory using nix. I still don't know if this has the
     same power of ~NixOs~, but it seems the thing I want. Especially,
     considering that I wish to be more OS independent as possible.

     What you have to do is to create a ~home.nix~ into your
     ~$HOME/.config/nixpkgs/~ and then run ~home-manager switch~.
     Checkout my [[https://github.com/benkio/nix-config/commit/378a70906e691d4bdf3892844740743716eef40f][Initial Commit]]. If you want to check out the initial
     reference script, you can find it [[https://gist.github.com/benkio/2d4346e5e02b85556b0e][here]].

*** Setup From existing Github Config

    As every emacs user, I already have my emacs configuration
    gelously crafted and polished. Now, I don't want to restart from
    scratch and specify all the packages I have and so on, plus I have
    some custom ~elisp~ functions I wish to preserve. Fortunately,
    ~Nix~ gives you a way to fetch something from github using
    ~fetchFromGitHub~ function. ([[https://nixos.org/manual/nixpkgs/stable/#sec-sources][Manual Section]])

    So, the idea here is to:
    + Download your config from github: provide the owner, repo,
      reference to the specific commit or tag and hash SHA256 of the
      resulting directory
    + Tell nix to copy it into the ~$HOME/.emacs.d/~ directory. I
      can't move it since nix stores immutable directories in his
      store. Therefore, you must just make a copy to the desired
      location. Fortunately the emacs config, without compilation
      packages is not that big.
    + Setup the emacs server hook. (Optional, advanced topic)

    And that should be it. I took [[https://github.com/NixOS/nixpkgs/issues/14277][this issue]] as a reference.
    *EDIT:* After a little bit more research I found this better
    answer: [[https://discourse.nixos.org/t/home-manager-spacemacs/8033][emacs.d home-manager dot file(directory)]]

    This works, BUT!!! the result will be all symlinks to the nix
    store. Then, you can't actually change anything from the
    configuration itself. You should change it somewhere else, commit,
    recalculate the sha256...a full-pain. Then, you have to put a
    simple shell snippet to copy the source to the ~$HOME/.emacs.d/~
    folder and change the permissions in order to be able to change
    it.

    Huge downside of using `fetchFromGitHub` is that it just download
    the tarball and extract it's content. Therefore, your emacs ~.git~
    folder is not downloaded and then, when you move it to the right
    place with the shell snippet you don't have the git
    repository. Now, you can decide to use `fetchGit` with the
    option ~leaveDotGit = true~ to solve the issue, *but* remember
    that ~nix~ rely on sha256 and bring the ~.git~ folder down will
    increate the probability of a mismatch!! ([[https://discourse.nixos.org/t/keep-git-folder-in-when-fetching-a-git-repo/8590/2][source]])

    As a result, you will have your beloved ~emacs.d~ config
    maintained in another repo. The only weirdness I noticed was that
    the resulting ~git~ repo is set on a new branch called
    ~fetchgit~. What you have to do is to:
    + Setup the remote: ~git add remote origin
      https://github.com/....~
    + Create & checkout a new branch from ~master~.
    + Delete the ~fetchgit~.

    Now the question is: does in work consistently? Is it actually
    reproduceable? Future myself will tell.

    [[https://github.com/benkio/nix-config/commit/6b2a31fafab4f9853f9ef9a87acbebbfa810eab1][emacs configuration commit]]

*** Provided Packages

    I must say the amount of available packages is huge: I found
    (almost) all I needed straight out of the main channels. I had
    some trouble installing the ~amule~ package due to a missing
    library (~crypto++~) and the ~home-manager build~ became quite
    slow checking the packages, but overall it went smoothly more then
    expected.

    [[https://github.com/benkio/nix-config/commit/ef67d992efe0f96840e16814fe669ebae8c2498d][add packages and todos to the home.nix]]

*** The Unexpected

    I added more packages, I added the keyboard configuration and so
    on, then I looked into how to setup I3 and x11. Well, as a result
    I caused an infinite login loop, inserting ~startx~ into the
    ~.bash_profile~. Apparently it tried just to turn back to login
    again!!

    Well, I guess it's time to try to setup a new virtual machine then.

    As you could immagine, setting up X11 and XOrg is not that
    straight forward as the other packages. The reason behind this is
    because online you can find a lot of articles using ~NixOs~ that
    provides a system layer, meanwhile in here I don't have that, I
    need to setup everything into the ~home-manager~ that seems to
    have a subset of the configurations you can specify in
    ~NixOs~. 

    For example, in the following pages all reference to the
    ~Nix~ configs in the /etc/ folder:

    [[http://wiki.haskell.org/Xmonad/Installing_xmonad#NixOS][XMonad NixOs Installation Page]]
    [[https://gvolpe.com/blog/xmonad-polybar-nixos/#xmonad][Gabriel Volpe's XMonad Config]]

    *edit:* I start thinking that, installing ~XOrg~ into ~VirtualBox~
    is not a worderful Idea and it might just not work. I'm thinking
    about creating a Virtual machine with a GUI in place. I know it's
    a fallback from the initial plan, but I have to reduce the amount
    of weirdness if I wish to proceed ðŸ˜ƒ

    Ok, I tried and tried and tried. Finally I have to give up on
    setting the WindowManager. Basically, if you are using ~NixOs~ it
    should be easy: you have your own ~/etc/nixos/configuration.nix~
    where you set your system configuration and then, on
    ~$HOME/.config/nixos/home.nix~ you can enable thing on the user
    side easily. The problem here is that you are bound to
    ~NixOs~. Ok, you can install it with ~nix-in-place~, but in my
    mind you should be able to *CONFIGURE* everything you want without
    having to go into the specific Linux distro.

    I might ask for help in the future into some IRC channel or wherever.

*** Developer Environment

    Ok, I can live without setting my window manager for now, what
    about ~scala~ and ~haskell~ then? Well guess what, I cloned a
    bunch of project in both languages and I wasn't able to compile
    them in the virtual machine.

    + Sbt :: ~MissingRequirementError: Object java.lang.object in
             compiler mirror not found~
    + Stack :: ~libgmp.10.so: cannot open shared open file~

    For both this errors I scanned the internet for HOURS without any
    success. after all this pain I'm really considering to just have
    an additional shell script to run post-nix. At least I can get
    what I can't set from nix...if I just don't consider the whole
    experiment a failure, especially considering that I could just
    install the ~haskell-plaftorm~ with a one-liner command.

** Conclusions
  :PROPERTIES:
  :CUSTOM_ID: ArticleConclusions
  :END:

  #+caption: Weekend Recap
  [[file:./2021-01-29-NixMigration/weekendResult.png]]

  Well, this is the final result. Not that great. What I could try to
  do is to actually use directly ~NixOs~ and get away with it, but
  who knows.

  I know you want me to answer the questions:
  - Is it hard? Yes, as everytime you need to work with a new
    technology I guess. You need to learn a new language, a new way of
    dealing with software and basically google for everything hoping
    it's not a pain in the nuts...being often disapponted...
  - Do you reccommend it? Mmm hard to say, I did it since I'm a nerd
    and I like to try things out when I hear good things about them,
    but it's really worth it? Isn't just better to create your docker
    image and live with it? Is actually better then a well crafted
    script? Very hard to say, but I mean: I use emacs, I have a blog
    in org-mode. It's obvious that there is already something wrong here.

** References
 * [[https://nixos.org/][NixOs Website]] :: Where you can find all the ufficial instructions
      about Nix and the related distro.
 * [[https://github.com/jeaye/nixos-in-place][Nix In Place]] :: You can install ~NixOs~ wherever you want (Linux or
      Mac) more or less.
 * [[https://github.com/nix-community/home-manager][Home Manager]] :: ~Nix~ package that allows you to access quite some
      configuration options of your home directory as well as manage
      your software.
 * [[https://github.com/benkio/nix-config.git][My Nix Config]] :: Here is where I try to build my nix
      configuration.
 * [[https://gist.github.com/benkio/2d4346e5e02b85556b0e][Reference Script]] :: Script I used until now to setup a new machine
* Share Buttons
  :PROPERTIES:
  :CUSTOM_ID: ShareButtons
  :END:
#+BEGIN_EXPORT html
<!-- AddToAny BEGIN -->
<hr>
<div class="a2a_kit a2a_kit_size_32 a2a_default_style">
<a class="a2a_dd" href="https://www.addtoany.com/share"></a>
<a class="a2a_button_facebook"></a>
<a class="a2a_button_twitter"></a>
<a class="a2a_button_whatsapp"></a>
<a class="a2a_button_telegram"></a>
<a class="a2a_button_linkedin"></a>
<a class="a2a_button_email"></a>
</div>
<script async src="https://static.addtoany.com/menu/page.js"></script>
<!-- AddToAny END -->
#+END_EXPORT

#+begin_export html
<script type="text/javascript">
$(function() {
  $('#text-table-of-contents > ul li').first().css("display", "none");
  $('#text-table-of-contents > ul li').last().css("display", "none");
  $('#table-of-contents').addClass("visible-lg")
});
</script>
#+end_export
